--- METADATA START ---
Show: Willâ€¦ - The Twenty Minute VC (20VC): Venture Capital | Startup Funding | The Pitch
Episode: 20VC: Windsurf Founder
Host: Harry Stebbings
GUESTS: Varun (CEO of Windsurf) 
Guests: Varun (CEO of Windsurf)
Source URL: https://podcasts.apple.com/us/podcast/20vc-windsurf-founder-on-will-model-companies-own-the/id958230465?i=1000710839187
--- METADATA END ---

1
One of the weird things about startups is that you don't win an award for doing the same wrong thing for longer.
2
Down the line, when you fail, none of them will care.
3
Companies that are usually first to a new paradigm are companies that are willing to disrupt themselves.
4
When you have a new great idea, even the crappy version of that idea is already amazing.
5
Startups don't fail because they look like messes inside.
6
Startups fail because they don't do the right thing well enough.
7
It is much easier to run a company that has only one thing that matters than it is to run a company with the same amount of revenue with five things that matters.
8
This is 20BC with me, Harry Stebbings, and I'm so excited to welcome one of the hottest, most talked about startups from the valley today, Windsurf and their CEO, Varoon.
9
Now, this story is insane.
10
Windsurf is the third pivot of the company, and in just a year, they've become the leading AI-native IDE, which has over a million users and generates over 50% of all committed software across thousands of companies.
11
As a result of this insane trajectory and growth, reports have emerged of a $3 billion acquisition by OpenAI.
12
This was an incredible conversation with Varun today.
13
But before we dive into the show's day, I love seeing the team come together to make this show happen.
14
What I don't love is trying to keep track of all the information, the data, and the projects that we're working on across dozens of platforms, products, and tools.
15
That's why we use Coda, the all-in-one collaborative workspace that's helped 50,000 teams all over the world get on the same page.
16
Offering the flexibility of docs with the structure of spreadsheets, Coda facilitates deeper teamwork and quicker creativity.
17
And their turnkey AI solution, the Intelligence of Coda brain, is a game changer.
18
Powered by Grammarly, Coda is entering a new phase of innovation and expansion, aiming to redefine productivity for the AI era.
19
Whether you're a startup looking to organize the chaos while staying nimble or an enterprise organization looking for better alignment, Coda matches your working style.
20
Its seamless workspace connects to hundreds of your favorite tools, including Salesforce, Jira, Asana, helping your teams transform their rituals and do more faster.
21
Head over to coda.io/slash 20vc right now and get six months off the team plan for startups for free.
22
That's codacodio slash 20 VC and get six months off the team plan for free, coda.io slash two zero vc.
23
And while coda keeps the engine running smoothly, Shopify puts the pedal to the metal when it's time to sell.
24
When I was 18, I dreamed about being an investor with zero contacts in the industry, and through persistence, I'm now living that dream.
25
Maybe you're dreaming of your own business, and that's where Shopify steps in.
26
I spend my time exploring successful businesses online.
27
Often, there's a business behind the business driving success.
28
For millions, that's Shopify, powering 10% of US commerce.
29
Shopify offers beautiful templates, AI tools for product images and descriptions, easy marketing campaigns, and 24/7 support.
30
Their number one checkout boosts conversions by 50%.
31
Fewer abandoned carts, more sales.
32
Winner, turn dreams into success with Shopify.
33
Go to shopify.com/slash 20vc for your $1 per month trial today.
34
That's shopify.com/slash 20vc.
35
And while Shopify helps you drive sales, don't forget what really keeps those customers coming back.
36
Trust is the ultimate currency in business, and today customers expect it faster than ever.
37
And that's why over 10,000 global companies trust Vanta.
38
Vanta automates up to 90% of the work for in-demand compliance standards like SOP2, ISO 27001, and more, using smart AI to centralize workflows, manage risk.
39
And a new IDC report found that Vanta customers achieve $535,000 per year.
40
in benefits.
41
That's insane.
42
And the platform pays for itself in three months.
43
I had no idea about these.
44
Whether you're growing fast or just getting started, Vanta connects you with trusted auditors and experts, support to help you build trust with customers.
45
Get $1,000 off your first year at Vanta.com forward slash 20 VC.
46
That's Vanta.com forward slash 20 VC.
47
You have now arrived at your destination.
48
Varun, I'm so excited for this, dude.
49
I've heard so many good things, by the way, from Lee Marie, from Neil Nater, from many others.
50
So thank you so much for joining me, man.
51
Yeah, thanks a lot, Ari, for having me.
52
Not at all, dude.
53
But I wanted to kind of pick apart.
54
I've literally just been running and I've been listening to some of your shows before.
55
And there are a couple of segments where I was like, damn, I wish we'd double-clicked on that.
56
And there was one that I thought I wanted to start with.
57
You said, it's very rare that the first thing you believe will be the right thing.
58
How have you changed your mind on what a truly great idea is versus what's not?
59
I think there's a lot that's right about the Peter Tielism of you want to pick something that seems a little bit not obvious to start with for whatever company you're starting.
60
The problem is most ideas that are not obvious are just bad ideas.
61
Like most ideas that are non-conventional, just because you are non-conventional doesn't mean you're going to pick a good idea.
62
And I think people sometimes forget that.
63
At a high level, though, if you pick an idea that is like obvious to everyone, there's probably no alpha, right?
64
A big company is going to go out and already beat you to the market, right?
65
Because they have more distribution.
66
Startups usually win by picking non-conventional ideas to the public, but you kind of need to go in and be humble enough to understand that probably there's a good chance that your weird idea is not actually a good idea.
67
What do you believe was your non-conventional insight when you made the pivot to WinSurf?
68
The first idea that we had, even like our company name has changed twice now at this point.
69
It was called Exafunction when we first built GPU virtualization technology, was that GPU workloads were going to power the world, right?
70
That was like sort of the mission there.
71
A lot of us at the company had previously worked in autonomous vehicles and AR VR at the company.
72
We had a fairly small team.
73
That was actually accurate that GPUs were going to become very popular.
74
Like we were, we basically said NVIDIA is going to sell a lot of GPUs.
75
The thing we were wrong about was how diverse the GPU workloads were going to be.
76
We thought a bunch of different model architectures would be run.
77
There were going to be hundreds of different model architectures, and we were wrong.
78
All of them ended up being transformers.
79
And in a world in which all the architectures look the same, there's very little reason for us to be a differentiated infrastructure provider in that category.
80
So we needed to pivot at that point.
81
But that's one of those things where you don't know going into the market that that's how the world is going to turn out.
82
And we were just wrong about our hypothesis.
83
So that's why, like, sometimes you have a take that is not very obvious at the time, and then you could be wrong.
84
Totally.
85
The trouble is, many people are in love with their thesis.
86
That's why I hate thesis-driven investors, bluntly.
87
But many people are in love with their ideas, and they're told that actually the true grit and persistence of an entrepreneur is what separates those that win versus those that don't.
88
How do you think about that?
89
Versus a brilliant statement, which I agree with.
90
You said, never be too in love with your ideas.
91
This is the hardest part about starting a company or building a company in the first place, right?
92
It requires these two almost counter-beliefs in your head: irrational optimism, because if you don't have any optimism at all, you won't do anything and you won't get out of bed.
93
And uncompromising realism.
94
Every single day, you need to be asking your question: do we have a reason to exist?
95
And if the answer is not really, you need to change your mind really fast and reorient the entire company really fast.
96
One of the weird things about startups is that you don't win an award for doing the same wrong thing for longer.
97
Like it might feel better to tell your coworkers, tell your investors, tell your friends that, hey, I'm still doing the thing I did.
98
But down the line, when you fail, none of them will care.
99
What idea do you think that you are too in love with today?
100
So I'll give you an example.
101
For me as an investor, discipline around portfolio construction.
102
I love the belief of a disciplined investor, the craft of portfolio building.
103
The challenge is in today's world, you have to break most rules.
104
And it doesn't mean that you're a cowboy and you're gambling, but it means you're much more elastic than the more concrete investor mind.
105
That's what I'm too in love with.
106
What do you think you're too in love with?
107
I think if I was to go empirically, we were too in love with our ideas every time.
108
Like other people outside looking at might have been like, this company has pivoted multiple times and that's a positive outcome, but I wished we had done it faster.
109
I still beat myself over the head on why did we not pivot from the GPU virtualization to the code AI company three months earlier.
110
I think we had the signals, but we waited until the companies we were working with were starting to go belly up before we actually pivoted the company.
111
A lot of our customers at the time were autonomous vehicle companies and it was peak Zerp era.
112
And in the middle of 2022, when a lot of them were unable to raise their next funding round, that's when we started to question: hey, like the market is changing, the technology is also changing, but also our future.
113
And the same is also true for ideas like Windsurf.
114
I think we knew agents were going to be very powerful, and we could have built Windsurf a couple months earlier.
115
We should have done that if we could have.
116
Can I ask you a question?
117
I just had the CEO of Fiverr on the show, and he said that time to clone is one of the most important things that have changed over the last few years.
118
Time to clone being the amount of time it takes for someone to copy exactly what you have.
119
How important is it to be first if time to clone is shorter than ever before?
120
Being first does two things.
121
I think it's a signal of how you're running the company.
122
That's one.
123
And the second thing is it allows you to learn faster.
124
And I'll maybe double-click on the first one.
125
Companies that are usually first to a new paradigm are companies that are willing to disrupt themselves.
126
They're organizations that are open to the idea of changing at a dime very, very quickly.
127
And they're always investing in technologies that are not incremental and willing to sort of break themselves.
128
And I think that's a good organization in a category like software or code AI where the space is changing so, so quickly.
129
And then two, I think it kind of boils down to what does it mean if you're first?
130
That means you get to learn from the market faster.
131
And that means you're first to the next idea too, because you see where all the dead bodies are in your category.
132
One of the nice things that I like to think is if we have a product in market earlier, what are all the things we can learn in the first month that enable us to build the next product in the market as well?
133
That could give us a compounding advantage with time.
134
Is it not more helpful seeing someone else go first, see what they do as a mistake, and then learn from their mistakes and leverage the costs that they have and then do it without that cost for you?
135
I think the problem in software in general is they could have made a lot of mistakes internally during research and development.
136
And organizationally, now, I believe our company has so much wisdom in our category that there are ideas that we would not even touch because we are just like, hey, we've tried this before and it didn't actually work.
137
And that's something that's like built into the DNA of the company as we continue to innovate.
138
What have you tried before that didn't work that the world doesn't know about?
139
We shipped a beta version of this product, but we were dogfooding it for such a long time.
140
I'll give you maybe a couple examples here.
141
The first thing is we actually shipped a beta product for code review last year.
142
And we actually tried out different ways of shipping a code review product.
143
We added Chrome extension.
144
We did something internally where we built a parallel website.
145
And we were able to try a bunch of things internally and none of them felt quite right.
146
And now a couple weeks ago, we actually shipped a code review product and it feels much better and is providing a lot more value.
147
And we shipped it in the way we shipped it because of all the failed attempts that we made last year.
148
I'll give you a second example here.
149
For the Code Agent product that we launched with WinSurf, we actually had a first cut of that product in the beginning of last year and it was not good.
150
It was not good for a variety of reasons.
151
And that enabled us to go back to the drawing board and fix up the different elements that would allow us to ship WinSurf, which was that we needed to get really better at codebase understanding, as well as the models needed to get better.
152
But then once the models had already gone better, our internal RD on codebase understanding had gone good enough that we were ready to go and ship the product.
153
This is one of those things where if we had just waited for the rest of the world to have it, we would need to have played catch up on multiple axes just to ship the product.
154
Do you advise founders to raise as much as possible early?
155
Because it is about the number of at-bats that you have, the experiments that you can take.
156
And if you raise more, you have more experiments fundamentally.
157
Do you advise that given the experience that you have?
158
Just to shed some light here, we actually raised our Series A on the GPU virtualization idea.
159
Green Oaks actually led that round.
160
They led your seed as well.
161
No, they did.
162
They led our seed too.
163
Yeah, they led our seed too, which whether or not they should have invested in the Series A on that one, leave that to the audience.
164
I think what that did give us is the confidence that, hey, like, if we pivot, we will still have the cash to go out and pursue an idea.
165
And we actually launched Codium, the extension product before this, entirely free.
166
And we were able to do that because of the infrastructure expertise inside the company.
167
But also, we were confidently able to do that because we knew we had cash in the bank to go out and like actually ship this product and not have to worry about any details there.
168
Right.
169
So I actually agree with you.
170
It does give you more shots at that.
171
But I think you need to be a company that is able to pivot very quickly.
172
Most companies, I would say, when they have 10, 15, 20 people, they're unwilling to change their idea entirely.
173
We, on the other hand, decided we wanted to work on Codium over a weekend, me and my co-founder, and we told the company on Monday and everyone started working on it that Monday, despite the fact that we were making a couple million in revenue off the previous business.
174
Is there anything that you can structurally do to increase the response time of an organization to move faster post-pivot?
175
Yeah, I think the answer is for a startup, one of my true beliefs is that companies don't succeed because they do many things well.
176
They succeed because they do maybe one thing really well.
177
Like it's kind of like what I said.
178
I think having one good idea already is like a miracle for most startups.
179
And when you think about it from that perspective, when you think about a company, think about two companies.
180
Any product has some sort of exponential curve at which it's able to grow, right?
181
There's some R value attached to a product.
182
The right thing for a startup to do is always focus on the product with a higher R value.
183
It never makes sense to be diverting your resources to work on two different products that have different exponential growth curves.
184
So when you do a pivot, I think the right answer is you should just give up what you were doing in the past because the thing you were doing in the past probably will have no sort of relevance to your business going forward.
185
The revenue multiple on that business is not going to look at all like the revenue multiple of the other business.
186
And I think if you can go cold turkey and actually go and make your organization completely work on the new thing, you're more likely to succeed.
187
But that's scary, right?
188
You need to tell people, tell your investors, tell your customers, you're no longer going to support that.
189
But I think once you make the tough decision, it's really easy.
190
You said that success is about doing one thing really well, and it's hard enough to have one thing.
191
You have that.
192
But what thing would you most like to do that you're not doing because you retain that element of focused mindset?
193
In our category, maybe if I was to just say this, in our category, a lot of our users of Windsurf are actually people that are non-developers.
194
They're people that are vibe coding apps and they're actually using it for productive use cases.
195
Like internally at our company, we have someone who's a non-developer who leads partnerships that has used our product and built apps to replace a lot of sales tool spend, like over $500,000 of sales tool spend internally.
196
They've coded 500,000 apps.
197
Yeah, they built apps inside the company for like a partner portal and quoting tool and so on and so forth.
198
That these are sales tools that in the past cost hundreds of thousands of dollars a year.
199
They didn't have a pay rise phone.
200
Yeah, I mean, we should consider that.
201
But the reason why that was the case before, not to go on a tangent, was because these are very bespoke tools that do a singular function, and no single company wants to build this out themselves.
202
But now with software being so cheap to build, like ephemeral software or simpler software being so cheap to build, you can now have non-technical people kind of building these apps.
203
Harry, like one interesting avenue for us is how do we make that user much more productive than they are right now?
204
But there's always this tension, right?
205
If we make that user much more productive, we might be giving up the ability to make developers that operate on large code bases much more productive too.
206
It's just a focus game.
207
Is Windsurf about making engineers 10x better, or is it about making the normal person able to be an engineer?
208
So I think we are focused on the former.
209
We are focused on the former, and a consequence of that is the latter, because the technology underneath is capable of doing that, but the focus is definitely the former.
210
Will you converge over time?
211
Will cursor and you converge to eat the lovables and bolts, and will the lovables and bolts converge to try and eat you?
212
I think those tools that are very focused on, like the lovables, the bolts, that are very focused on the non-developer, with time, they're going to need to build out more and more tunables, more and more ways to configure the product with time.
213
But I think for us, if we can deeply understand code, like large code bases, it'll naturally follow that with very little effort, non-technical people can build apps.
214
But maybe my point is, if we build for that use case right now, we're going to be kind of foregoing the ability to help developers.
215
But I think it will converge.
216
It will converge with time between both of these categories.
217
Like a company that deeply understands your code base will be able to, with very little natural language, build an entire app that is consistent with existing code bases inside the company.
218
I'm so enjoying this, by the way.
219
I'm sorry, I have this beautiful schedule, but fuck it.
220
If you had infinite resources, is there anything that you would do differently to how you're doing it today?
221
We'd be making many more bets inside the company, like trying many more things.
222
Like as I said, probably 50% of the things that we try inside the company or more actually fail.
223
We are actually investing a lot of our product technology on things that are in the future, and most of it fails.
224
I would like to fail even more, but the weird thing about startups is the one thing that works pays for the hundreds of things that fail internally at a startup.
225
I spoke to Neil Mater about stuff that I had to ask you before, and he said you do have to ask him about how he builds product and his product building cycle.
226
You mentioned that 50% fail, the internal cycle.
227
Can you talk to me about some unconventional ways that you think about internal product building that you think are important?
228
Yeah, I think there's conventional wisdom and from other people that a company with more engineers is just going to succeed, but that sort of kind of makes software engineering and just RD feel like a factory building process.
229
I think the right way to actually look at it is when a product or an idea has no legs and you're proving it out, you should actually have very few people working on an idea.
230
Everyone will understand this.
231
Imagine having 10 people working on something that has not been proven out.
232
Everyone has opinions, everyone has ideas, and nobody's ideas are wrong because no one has proven anything out.
233
So, it's very hard to get alignment.
234
It's very hard for people to work in one direction without causing communication issues.
235
Instead, what is actually really good is: can you have a handful of people with an opinionated stance that can go out and prove out an idea?
236
And then the question is, if you can go and get a nugget of value, and this is like a hard question for any product, how do you know when to stop working on it?
237
And I think there's this interesting kind of piece of wisdom that we've built, and a lot of us at the company have worked in hard tech before this, like companies like autonomous vehicle companies before this, is that when you have a new great idea, even the crappy version of that idea is already amazing.
238
Like, it already proves something amazing.
239
Like, for instance, when we built the first working version of like the agent in Windsurf, even the crappy version of that was able to do.
240
And then at that point, once you've proven the crappie version has legs, you can then go and resource more people on the project to actually go out and pursue it more deeply.
241
It's so fun.
242
No wonder Neil loves you because he always talks to me about the real customer delight moment and that shock and awe that they feel when they have that first agent experience that you mentioned.
243
I totally get it.
244
Can I just dig in on a couple of elements before we carry on?
245
You mentioned like a handful of people.
246
How many is that?
247
How do you structure these teams on new bets?
248
It's maybe three or four people.
249
A couple of engineers and a designer?
250
Yeah, it could be just kind of pure engineers that are building this out.
251
One of the cool parts about our product is we are a developer product.
252
So our developers themselves have some intuitions on a crappy version and how useful it could be, at least the B0, right?
253
Because we're building a product for developers.
254
Budget-wise and time-wise, do you set that?
255
Do they set that?
256
How does that work?
257
I don't think we actually think about that.
258
And I think that's partially because we're in an unconstrained market right now, right?
259
The value of great technology that could accelerate software development is so valuable to our customers that for us, I guess we largely speaking don't think about it from like a perspective of what is the budget of a particular project.
260
Now, what we do look at inside the company is what is the progress we're unlocking in a project over time and whether or not we should decide to move on and work on something else, like table something and work on it later.
261
Like that is something that we decide.
262
And that's not a democratic process inside the company.
263
It is like a little bit of a top-down process.
264
Is there anything that you've tabled that with the benefit of hindsight, you're like, oh, Varun, I should have kept going with that one?
265
An example of something we probably did table was the autocomplete experience, which is the first product that we actually built out.
266
I think we actually.
267
Part of the reason why the product experience wasn't as good actually was because we were stuck in VS Code and VS Code didn't give us the UI capability to make the product much better.
268
And once we had WinSurf, we were able to invest much more in the capability.
269
You mentioned VS Code there.
270
It brings me to the topic of kind of moats and defensibility.
271
I'm obviously an investor for my sins today, as well as being a terrible British podcaster.
272
On moats dead in a world of AI.
273
You're not blind to this.
274
Everyone says, cursor, Windsurf, I can switch between the two.
275
Help me understand.
276
Our moat's dead, and how do you think about that?
277
You know, I think startups, by and large, just this idea of a startup having a moat is usually kind of silly for the most part.
278
Like the conventional seven powers, you know, if anyone in the audience has actually listened, you know, read the book.
279
I love it.
280
Yeah, it's a great, I think it's a great book.
281
I think it's just a premature for a startup for the most part.
282
Because, okay, fine.
283
You have a company with 50 engineers.
284
You could have the best engineers in the world.
285
I think we have amazing engineers.
286
Like a majority of our engineers are from MIT.
287
I think we do get the top few percentage of MIT to come to the company.
288
But still, like, it's still like if we have 50 to 100 engineers, it's still only hundreds of engineering years that have gone into our product.
289
This is not something where ultimately someone else can't build something in this as well.
290
And I think the only moat in our category is speed.
291
It's kind of like what I just said.
292
It's learning where the dead bodies are, learning how to compound an advantage.
293
And I think maybe an example of this that I'd like to bring up is even a company like NVIDIA.
294
I think everyone outside looking in is like, CUDA is the real moat, or something like that.
295
I think that's just inaccurate.
296
When you look at large companies like OpenAI, Anthropic, Google, let's say Google, if they were buying NVIDIA, I know that they build their own GPUs.
297
Are you telling me if CUDA didn't exist, they would not use NVIDIA GPUs?
298
No, they find a way to write assembly, the lowest level code, and make that run on the GPUs.
299
It's that expensive for them.
300
The reason why people use it is it's just awesome.
301
They've made it really capable at doing low floating point math.
302
They've made the interconnect really good.
303
The computers really fast.
304
And every year, they have a ticking time bomb on their head.
305
If they don't make the hardware, the interconnect, kind of the memory bandwidth much, much faster every year, they're going to lose.
306
Like their profit margin is going to shrink, right?
307
And AMD will be on their case.
308
That's a little bit of a surprising sort of feeling.
309
Like NVIDIA doesn't have the same properties of a company that a company like Google has, but it's still one of the most valuable companies out there.
310
I agree totally in terms of the moats for startups.
311
If you have two companies starting the start line today, but if one of them becomes part of a very large company, say an OpenAI or an Anthropic, and they suddenly have distribution and they have brand and they have resources which buys chips at scales that are unparalleled compared to what any other startup can do, suddenly seven powers becomes increasingly prominent and moats exist.
312
No?
313
I think the reason why some of this wisdom is potentially not correct is I think speed is still important in that case.
314
And the reason why is like, why does a startup ever win?
315
Why does a startup ever win in an important category?
316
Why did Google win in the early 2000s when Microsoft was already a beginner at that point?
317
If a company has good insights and is able to out-execute strategically another company, they will win in a space.
318
I would argue that distribution is more important than speed.
319
Listen, you're the multi-billion dollar founder, so please correct me.
320
But I'm like, partnership agreements is really what propelled Google in the early days to be so successful.
321
Maybe, let me put it this way: our space is like very, very valuable.
322
But if you actually look at a lot of the hyperscalers, their products in the category are not amazing products, even though they have a lot of distribution already.
323
Why is that?
324
And I think it's actually because it is hard to marshal together talent to actually go out and execute in this category very quickly.
325
Right?
326
We're the kind of company where right now we're shipping a major release every one to two weeks.
327
Name a large company that is able to learn that quickly.
328
Why do large companies suck at velocity of development when the market is as hot as it is today?
329
I think it's existential dread.
330
A startup has existential dread on whether or not they can survive if they don't ship fast enough, if they don't learn fast enough.
331
If I'm inside a behemoth, like I'm inside Amazon, right, and Amazon has a product in our category right now.
332
Do you think the employees working on this are worried if they will have a job in six months if they don't ship a great product?
333
If we had shipped the same quality product that some of these hyperscalers have shipped, we'd be out of the market a year ago.
334
But they probably still have their jobs right now.
335
It's the seven days a week that's becoming the norm again in Silicon Valley, huh?
336
We're an in-person company, actually, right now, like a 100% in-person company.
337
Can you build a company today remote as efficiently as the in-person, seven-days-a-week Silicon Valley specialness that you're seeing return to the valley again?
338
I think it's just, it might just be a little bit harder, right?
339
I think you need to be a much more principled company to start with.
340
It's just an unfair advantage if a company is able to get their engineers kind of in the same room and on the same page every five minutes if necessary, right?
341
It's an unfair advantage on speed compared to a company where people are on., everyone at the company can be kind of like brought into a room at that very moment.
342
It just makes your flexibility a lot faster.
343
And in the early days, Harry, when I was talking about how obvious it is that your first idea or your ideas are not going to be accurate, you should be able to pivot extremely fast and kind of like marshal everyone at the company as quickly as possible.
344
Do you think in your category, brand power is important?
345
People associate with being a windsurf user or a cursor user.
346
Do you think brand has that same power that it does in other categories?
347
I would like to.
348
Obviously, I think having a large brand is just helpful.
349
It enables you as you ship more and more new products for more and more people to be able to use it and not have to build that, build the user base up from scratch.
350
But if I just was to remind everyone, you know, kind of like a year or two ago, probably in Silicon Valley, GitHub Copilot was the product that everyone, everyone was talking about at that time.
351
If I was to talk about it a year ago, actually a bit over a year ago, was the Devon launch.
352
And I think for three to six months, I was not hearing anything but Devon from everyone.
353
And I think it's like in our category, we need to prove ourselves almost every day.
354
If in three months we don't ship something amazing to our users, we will become irrelevant to a lot of them, right?
355
If we don't actually keep up with the pace of innovation, we will become irrelevant.
356
So I think it's a little bit of, if you can maintain, if you can continue to innovate at a breakneck pace, the brand is definitely helpful.
357
But I don't think the brand gives you the right to move slower as a company.
358
But should these businesses not be valued inherently less or at a much lower multiple if their sustenance of value is able to determine?
359
As you mentioned, Kevin, as you mentioned, GitHub, Copilot, brilliant examples.
360
And then suddenly have a reduction of value so fast.
361
Should they be valued in the same way?
362
So I think there are still qualities of our company that we haven't really talked about of like having a large enterprise business, being wall-to-wall at very large Fortune 500 companies, right?
363
And being able to work properly for large teams, which has inherent switching costs for the business, right?
364
Not the same class of switching costs as some of the products like, I don't know, Salesforce yet.
365
I don't think we built that out.
366
There's a trade-off where if you focus so hard on making your product a switch off of, if you also don't improve your product fast enough, people will just switch onto the better product, despite the fact that it's hard to switch off of your product, right?
367
I always remember seeing a tweet from Tom Blomfield, who's a friend of mine.
368
He was like, I don't really get this space.
369
I was a cursor user and I switched to Winsurf and it was like better or just as good.
370
He switched to WinSurf for this one project.
371
I have no idea if he stayed.
372
I'm not making a comment, Tom.
373
Don't kill me.
374
My question to you is like, how do you think about switching costs and retention?
375
And is it that easy to switch between the two?
376
We need to innovate on features and product fast enough that we're able to build differentiated experiences for folks.
377
That actually takes a lot of work, right?
378
Like as I was saying, most of our products that we end up building don't end up working.
379
And even though we're shipping releases every couple weeks, some of the more complex pieces of technology that we've shipped, they take months to actually ship.
380
So I'll give you an example.
381
A couple of weeks ago, we shipped a model that was comparable to some of the Frontier models at the Agentic Workload.
382
And our model, SWE1, is much faster, much cheaper for us to run, and capable of operating over a large code base as well.
383
And we were able to do that by learning from our users on how they use the product internally.
384
But these are the kinds of, and now it processes hundreds of billions of tokens of code a day, that single model, right?
385
And it's running on our own GPUs.
386
But this is like one of those things that it takes time to kind of build out these capabilities.
387
Just like how maybe, you know, for everyone in the audience and folks like Tom, he probably never heard of our company 10 months ago and used our product 10 months ago.
388
These things change extremely quickly.
389
But you're totally right.
390
The fact that it can change this quickly means that you need to be ultra-vigilant.
391
The same reason why no one had heard of us in Silicon Valley like maybe 10, 12 months ago, and now like a lot of folks have heard of us, the same thing can happen in the other way, too.
392
You mentioned the strength of enterprise in your business.
393
How much of your revenue/slash usage today is enterprise versus bottoms up?
394
Yeah, so I would say like over 50% is actually enterprise.
395
What are the biggest questions, lessons, things that enterprises care about when they buy you?
396
I think there's maybe a handful of things.
397
I think the first thing is a lot of enterprises and large companies, this is something that's not very obvious to folks outside looking in.
398
They have a lot of Java developers.
399
And for the Java developers, actually, most large companies have a lot of code in Java.
400
They use an IDE called IntelliJ as part of the JetBrains family.
401
So this is like an interesting fact.
402
Even though we have the WinSurf editor, we still support plugins into all the JetBrains IDEs.
403
And it has the same functionality as the WinSurf editor.
404
The reason why we forked the VS Code editor was because we didn't have enough flexibility to build out the UI that we wanted to give out the new Agentic experience.
405
But we were able to give that out entirely in JetBrains in the plugins.
406
And I'll give you an example.
407
JP Morgan Chase, who's a customer of ours, over 50% of their developers are JetBrains users inside the company.
408
For those people, we're able to support all.
409
So that's again an interesting fact that I think outside looking at people don't really understand that for the enterprise, there are lots of these intelligent users that we need to satisfy.
410
And when we go into an enterprise, we don't want to tell them, hey, only 40% of your users can use our product.
411
We want to make sure all of their developers can use our product.
412
Do you think your customers will have more or less engineers in five years' time?
413
It depends on the type of customer.
414
And the word engineer is going to become a very flexible word, as I was saying, right?
415
As the technology gets better and better, people that are technical adjacent are going to be using WinSurf as well.
416
And we're already seeing this, by the way, at some of the companies.
417
What does engineer in five years' time mean?
418
If I would say, explain it to an engineer, if you were to go over time, just for an engineer, right?
419
If you go back 50 years, everyone is writing assembly.
420
Then after that, they're writing C.
421
And by the way, people still write assembly, though.
422
After that, they write C, then it's like C, then Java and Python.
423
And then now a lot of people are writing JavaScript, right?
424
Ease of programming has gone up.
425
But a lot of the people that write JavaScript have no idea how to write assembly at this point.
426
So I think it's going to be something along those lines, right?
427
There will be people that are able to operate purely on a natural language-based abstraction.
428
And the AI tools are able to explain to them how different components of the software stack work so that even though they're operating on top of natural language, they're able to still be valuable to the company.
429
But then ultimately, down the line, there will always be production-critical applications.
430
Let me give you an example.
431
Let's say I'm JP Morgan Chase, and I'm building my transaction processing system.
432
You probably don't want to vibe code then, right?
433
Like, Harry, if you give me $100, probably you don't want to lose $100 and for me to not get the $100, right?
434
I'm going to complain.
435
And that's some transaction processing system that's running in JP Morgan Chase that is probably doing misery.
436
And for that, you probably want someone that can go all the way down to the weeds and validate if this actually makes sense because that's core to the way the business operates.
437
You're going to have a spectrum of people, right?
438
People that can operate purely on top of natural language and they're building capabilities and technology and apps inside companies, but then people also that can go to the weeds, go down to the weeds.
439
Now, how many people need to go down to the weeds?
440
Probably fewer than there are today.
441
Do we have PMs?
442
I'm always told that PMs are CEOs of the product.
443
And many have said that actually, we're not going to have PMs anymore.
444
11 labs, I had that head of growth on the show the other day.
445
He was like, we don't have PMs.
446
Do PMs have a role in five years?
447
I think the expectation for PMs is not going to be down the line.
448
It's not going to be, I tell someone to go and build something.
449
It's going to be, you should go out and build it too.
450
There will need to be a lot more agency on their side.
451
But the benefit is these AI tools are going to give them that capability.
452
Let's say you do have a technical PM that understands code and that can write code.
453
They are even more deadly now than they were in the past.
454
You don't need to give them a team of 10 people to prove out their idea.
455
One of the things that I kind of don't like about PMs, probably nowadays, in a lot of cases, is they spend so much time writing docs to try to convince the organization to do what needs to be done.
456
But instead, they should just go and build a version of what they want to get done and then prove to the organization that that's what needs to get done.
457
Why do you need to spend so much time babying your organization playing a game of thrones, right?
458
It doesn't really make a ton of sense.
459
Do we skip the design stage and go straight to prototyping in the future?
460
Probably the ability to very quickly mock up a design that is consistent with the design inside your company and prototype it is going to be much faster, right?
461
Like internally right now, when we build apps, we're not very, very quickly going to Figmaize.
462
And then obviously if it's core to our product experience, we're going to go out and design the layout and make sure it's to our standards.
463
But rapid prototyping, we can definitely skip a laborious design stage right now.
464
I'm just fascinated, like where all of it converges together.
465
As we said, you meet the lovables and the bolts in the middle, and then the Figmas are coming in now and actually saying, hey, turn design into code, and kind of coming in from outside.
466
I'm trying to figure out what this kind of mess looks like in five years' time, respectfully.
467
Yeah, I think it's a fair question.
468
Maybe one thing is for people outside looking in, the things that the lovables and Figmas do is like maybe a very small fraction of what software is, like ultimately.
469
Most software is not just like a website that has some back end attached to it, right?
470
There's complex database systems, software out there.
471
There's all of this infrastructure.
472
Most of Google is not the front end of Google.
473
Like think about how much work goes into Google.
474
Google is probably one of the most complex pieces of technology.
475
There's a very complex re-ranker.
476
There's this database called Spanner.
477
That's a geographically consistent database that exists that's probably tens of millions of lines of code.
478
All of those things, there's no one that's designing something in Figma for modifying the Spanner code base inside the company.
479
But we would like it so that they were using Windsurf to actually go out and do that.
480
We don't sit and think about what these other companies are doing all the time.
481
We're sort of thinking about what are all the ways in which software engineers spend their time and how do we make them much more efficient.
482
So you're totally right that I think the design stage, a lot of things are going to get disrupted inside.
483
But maybe one point I just wanted to add is that's maybe just the tip of the iceberg on what a software developer ultimately does.
484
I was going through some of your tweets as well, and you said async remote agents were.
485
Can you expand on how you think about this and which tasks will be automated first?
486
I think what's most likely, so the idea of async remote agents, if you were to look at a product like WinSurf, WinSurf is actually a local agent that runs locally and it can do very long-running tasks.
487
Like you can migrate an entire code base from one version to the next, and it should be able to do that without you having to touch your keyboard once you instruct it to, which is very, very powerful.
488
But this idea of being able to do it asynchronously is also very powerful.
489
You can imagine like just firing something off from your phone and it just generating a pull request for you.
490
But I think one of the complexities of this is there's a building products in our category is I think there are three things that really are important.
491
There's latency, so how long it takes to get the response back.
492
There's quality, right, which is what is the correctness, and then correctability.
493
How quickly can you make a change?
494
And I think people kind of feel like if the technology is really good, they can kind of ignore these facts, but it's really, really important.
495
If you build an asynchronous experience and it takes 10, 20, 30, maybe a couple hours to go out and build something, people's expectations on the output are going to be really high.
496
Your quality has to be really, really high.
497
And if the quality is not high, it better be easy to correct.
498
But it's not very easy to correct.
499
Like when the workflow of how people build software, if all I do at the very end is I create a pull request on GitHub, which is the final way that people review the code, and even 20% of it is wrong, let alone 10%.
500
I wrote it has to be at least 90% correct.
501
People were like, it needs to be 99% correct.
502
I think they might be right.
503
Because if even 10% is wrong, people lose faith in the product because they waited hours to get the result, right?
504
And they need to bring it back in locally.
505
And modifying something that is 90% correct is not that easy because you need to understand.
506
So, my rough feeling on things is what are going to be done asynchronously remotely are things that where the task is so easy that it can actually get it done properly.
507
Like, the complex tasks are still going to get done in Windsurf in the short term.
508
Just because things that are complex and require a lot of rapid iteration, it's unlikely that you're going to do something asynchronously, wait 30 minutes, go and look at it in GitHub, and then decide, hey, it's not correct, and bring it back.
509
The feedback loop is too slow at that point.
510
To what extent do users care about latency, have you found?
511
Very much.
512
I'll give you an example.
513
Like, even for a tab product, 10 milliseconds, which is like the product that gives you not only the autocomplete, but the automatic refactors as the user is typing, every 10 milliseconds affects a percentage points and acceptance rate for the product.
514
When we think about these async remote agents that have to be incredibly responsive, that has to be correctable, what form factor do they take?
515
We mentioned that earlier, like just pinging off a message.
516
How do you envision the right form factor and what that will take?
517
It's not super clear, right?
518
It's possible that the right form factor is you need to fire this off from your ID because people are in their work state in their ID.
519
Now, the question is: how common is the use case that people want to fire things off from their mobile phone?
520
And then, if they do, is it fine for it to just be on Slack?
521
Do people want to continuously talk to something on their mobile phone?
522
I think the answer is maybe not, because if I get thousands of lines of code changes, I don't know how to review code very effectively on my phone.
523
And then, in which case, like I don't want to interact with something on my phone back and forth.
524
So, maybe I'm gamed to do one and done interactions on my phone, and then it better be 100% correct.
525
When we talk about the right form factor for these remote acing agents, it kind of makes me think about something that Satya said.
526
And I did write it down because I wanted to make sure if I got it right, because I didn't want to misquote Satya.
527
But he essentially said that obviously apps will collapse into agents and become just databases with business logics.
528
Do you agree with him in that respect?
529
Salesforce becomes a database that agents just crawl all over, a hubspot the same, and you basically have their utility value reduced to just databases.
530
I'm trying to think about why I think that's not exactly true, but you're totally right that I mean, you know, for any company, their entire state could be distilled down to a database, right?
531
For any company, I don't know if I completely buy that in the short term, these complex applications like Salesforce and Workday completely get replaced by another company that just builds a database and an agent operating on top of it.
532
A lot of complex workflow has been built around the idea of using Salesforce.
533
I'll give you an example.
534
When we built our sales team, everyone already knows how to use Salesforce down the line.
535
And now we built custom workflows inside Salesforce.
536
And you're right, those are all database transitions, but they affect the way humans operate with software.
537
It's very unlikely to me that what's going to happen is Salesforce will get dethroned by a company that is just a database with an agent operating on top of it.
538
It just, there's too much inertia for the company building out these complex workflows.
539
And maybe here's the final piece, and maybe why I believe that.
540
I don't think agents are good enough today that you can kind of just let them operate on top of a database and write to the database, automatically write to the database without human supervision for some arbitrary workflow.
541
Right now, we're still in the stage right now where these agents are mostly reading.
542
And that's just because maybe we don't trust these systems deeply enough right now.
543
Do you think we are overly optimistic about the progression of the agent landscape?
544
Obviously, as a venture investor, the only thing we give a shit about today is agents.
545
Do you think we are overly optimistic about where we are?
546
This is going to be the most obvious statement, but I think people think these systems are way more capable than they, like a lot of investors might believe they're more capable than they are today.
547
And I'll give you an example.
548
My goal here is not to not to kind of downplay anything here, but I remember last March when kind of the Devon launch came out, everyone was giddy with excitement of the idea of like software engineering is getting replaced.
549
Like a bunch of investors were like, oh, there's no reason to ever hire a junior developer.
550
You will have this.
551
And now we're very far from that right now.
552
I don't think, or at the time, we were very far from actually replacing a junior developer with an asynchronous AI agent.
553
But I think what people don't understand is, even if the technology is not there yet, I don't think they grasp how quickly the exponentials are improving, which is that in six months, what is capable of these models is going to be very different than what is capable today.
554
And I think people are, it's very hard for people to understand that.
555
Like what I just said about agents and the fact that they're really good at reading systems at scale, but people don't trust them to make writes to systems, to internal databases at scale, that will probably change in six months.
556
Because eight or nine months ago, people were not using agents a ton.
557
Yeah, I think people underestimate the speed at which these things improve.
558
What do you think in 12 months will be crazy that we don't have today?
559
Like you said there about kind of the transition and models plutonium improving so fast in such short time frames.
560
If you think about what we do today that we would consider crazy that will be a reality in 12 months, what do you think it would be?
561
I think a lot of things that maybe I think right now, if I was to say one of the biggest problems of these tools is mostly they help in the code writing experience.
562
They're not helping in a lot of different aspects of the software development lifecycle, which is software developers design software, right?
563
They deploy software, review software, build, navigate, they do a lot of debug, test, they do a lot of different things.
564
And I think the reason why it's mostly been kind of siloed to one or two areas is actually when you look at a software engineer and their job at a company, they look at a lot of distinct data sources.
565
They look at like a logging system.
566
They might look at a database.
567
They might do all these other things.
568
And I think these agents are going to get access to all of this data and all of this data, your browser data, all this stuff.
569
And I think what's going to be possible is debugging very complex tasks, designing systems is going to be something that these agents are going to give much more leverage for than they are today.
570
And I think this idea that software engineering, there's like a part of software engineering that AI is not going to touch because it's too hard, I think is just going to be wrong.
571
I think every aspect is going to become 10 times more effective.
572
Can I ask you a really hard one?
573
You mentioned Devon there.
574
If you look at, say, a cursor, what have they done well that you've learned from?
575
And what do you think they've maybe made a mistake on that you've learned from?
576
I don't know.
577
I don't know about a mistake, but I think for them, just actually, I think they took a really good approach on building high-quality UI UX that actually proved to be what people really loved.
578
And I think that's very impressive that they were able to do this right off the bat.
579
I think that's not actually what our initial intuition was.
580
And I think they executed well on that.
581
What do you mean by that?
582
It wasn't where you placed importance in terms of that initial UI UX being seamless.
583
Yeah, I think for us to go out and build Windsor, we actually.
584
And I think that was the only reason why we actually decided to go out and build, like, actually have our own IDE.
585
If we didn't do that, I think we're the type of company that would not just go out and build UI UX just for the much better experience by default, unless we had great technology.
586
I like to think of ourselves as like we're a technology company, and I think we ship product to maximize the amount of technology that our users can consume productively.
587
And we want UI UX that is not harming people's experience of our product.
588
To what extent is the quality of your customer experience defined by the software that you create, the UI, the UX, versus the model progression that lies beneath it being OpenAI anthropic?
589
Yeah, I think you can't downplay the fact that the latter is very helpful, right?
590
The Frontier model is getting more and more capable.
591
Every new capability unlocks maybe a new type of product experience that wasn't capable in the past.
592
But I think it's a little bit of both, right?
593
Maybe to put it kind of boldly, like we were the first agentic IDE experience when we launched WinSurf.
594
We were the very first ones.
595
Obviously, now that idea is not very, it's not non-consensus, like it was the obvious thing to do.
596
But these models like Sonet had existed for quite a while.
597
But it actually took us some work to actually put together, like using these models, but also using our own models internally to make this a usable experience with the UI UX to be able to review all the software very quickly before people actually, the product experience kind of took off.
598
So I think it's maybe a little bit of both, but I don't want to underplay how much the models actually affect the value people get from these experiences.
599
People often compare the model landscape to the cloud landscape.
600
The thing that I find challenging about that is cloud, you generally stick to.
601
You're on AWS, you're not switching between AWS and Google and anyone else.
602
To what extent do you think model landscape will be one way you have a preferential relationship with an AWS of the world in cloud or Anthropic or OpenAI and models versus actually you just work between many different model providers and you switch between them for different functions?
603
I think you're right.
604
The space is very early is the reason why it's kind of like the switching costs of these categories is not very high, right?
605
Moving from one model provider to the next, it's very low switching costs.
606
And by the way, that's because there's no state in these models for the most part.
607
So for the most part, it is almost like a Twilio-like experience where it's like send text message and you kind of send a text message.
608
But maybe I could send text messages with a lot of different applications.
609
But I don't take that as a big negative.
610
I think what that means is we're still evolving in this category.
611
Down the line, you could imagine models can actually internally keep a lot of state about a user, about all the data they have inside their company, about all the data they use locally.
612
If you were to look at a lot of large code bases, they are actually getting to billions of tokens of code.
613
What if that's actually something stateful that you can inject and inject and eject context about this from a particular model provider?
614
Like I'm sure there are ways in which they can increase their switching costs down the line as the technology gets better and better.
615
But I think this is what it comes down to, right, Harry?
616
In a category that is evolving so quickly and when the models are improving so quickly, it is actually bad for them to overinvest in ways in which they can increase switching costs.
617
That doesn't make sense.
618
Because let's suppose they did do that, but they missed the next improvement in the model.
619
They didn't do test time compute or something.
620
They would be behind.
621
And then it wouldn't matter that they increased the switching costs.
622
Ultimately, the analogy to cloud providers is not accurate right now.
623
They don't have the same properties.
624
Today, models do have non-commoditized properties.
625
Anthropic is often hailed as being better for developers, for example.
626
To what extent do we actually see the complete commoditization?
627
I mean, there are literally 12, 13 different providers in China who are racing faster than ever, and we'll reach some asymptotic utility point where all of them hit the same level.
628
And I'm sure the US will be the same.
629
To what extent do we hit that versus, no, no, Anthropic is the one for developers, Axe is the one for whatever else?
630
Yeah, I think it is unlikely that in the short term, you will have an ability for one model provider to just run away with a particular category if the category is like very valuable.
631
It's unlikely that that's the case.
632
Now, I do believe in things like the scaling hypothesis, which is to say with more scale, you are able to build better and better models.
633
You do have like your hands tied up if you're operating with less capital in the category, the nature of the game.
634
But I don't think we're anywhere near the point in which you're going to have someone who's the defining leader of having a great model and no one else can touch it for years.
635
And maybe the reason for that is actually because six months from now, if a new technique exists and someone else finds the new technique, they're able to do it in a much more efficient way.
636
And if they're able to do it in a much more efficient way, it means that if you just miss it and you're still applying your previous technique, you're going to be behind them.
637
So it's almost like unless you believe that companies, one company is going to get all the capital in the world and no one else is ever going to get the capital in the world, and one company has a monopoly on all great ideas, it is unlikely that you're going to have someone that is able to like run away.
638
Given the commoditization of that model layer, as we said, and no one being able to run away, to what extent the model providers have to move into the app layer to have any form of differentiation?
639
Yeah.
640
Maybe in the API side, I think there are lots of ways you can build better APIs for a lot of different applications.
641
And you can kind of focus on the applications you do support.
642
And an example of this is, let's say you were kind of working with a company like us, and we were using a model provider.
643
When we output code, maybe a lot of the code looks the same as existing code.
644
And you can actually optimize from a latency perspective to help our workload versus another workload that exists for images out there.
645
And you can be a much better kind of vendor to us than another company.
646
So there is maybe specialization you can have on different axes to provide a better experience.
647
But as you can see, you are seeing these model companies actually going up to the app layer two in whatever apps they see are valuable to them.
648
I think you're seeing a little bit of both.
649
People have too many opinions about what the right way to do things are.
650
And I think you have to be rational on what the best way to win is.
651
And I think that's the only thing that matters.
652
Final thing I do just have to touch on, because I talked to you for a long, long time.
653
Dario the other day was talking at some event or conference or whatever.
654
And he was like, 2026 will have like solo billion-dollar companies without doubt.
655
I just wanted to touch on this with you.
656
Do you think that's a good question?
657
I don't believe in that.
658
No, I don't believe in that.
659
Please explain.
660
This is the university essay.
661
Discuss.
662
I mean, I think the solo billion-dollar company would imply that no one else cares.
663
Like, we live in a capitalist market, so there's competition.
664
And if you're able to do something with one person, unless you're just a thousand times smarter and more capable than everyone else, like someone with two people that are as smart as you are probably going to be able to do your idea.
665
That's going to compress your customer acquisition cost or increase your customer acquisition costs.
666
Like, it seems like very hard for it to be the case that a single person is going to be able to run away with a billion-dollar product without continued investment.
667
The implication of that is like no one else cares about this, but magically, you're able to do well.
668
What do people who believe this to be true get wrong?
669
What are they fundamentally mistaking?
670
I actually never understood this idea of like a single person is going to be able to build a billion-dollar company.
671
I've never kind of understood it.
672
But I mean, because what is a company?
673
A company is the sum of the discounted cash flows over time.
674
And down the line, you're going to need people probably.
675
Or if the AI is so good that you don't need people, at some point, I would just wonder, what are you really contributing?
676
And is the AI building the whole thing?
677
In which case, I don't know, actually, that would reduce the AI too.
678
Can I ask you, you know, you've been across multiple different cycles of the business, ups and downs.
679
When did you question your love for it most?
680
I think we often say, like, oh, I'm always inspired.
681
I'm not inspired every day to do what I do.
682
Some days I am, some days.
683
Was there a period where you were not?
684
And how did you get through that period?
685
I think every time, basically, every time we've needed to make a strategic pivot, like actually it's before the pivot that it's probably the most anxiety-inducing because you feel like something could be much better than it is, but you are not acting on it.
686
And I think that is potentially the part that is the most kind of gut-wrenching.
687
Yo, it's actually an interesting point.
688
When we pivoted from Exifunction to Codium, I actually think post-pivot was the freest I've ever felt because I'd written.
689
In the past, yeah, we were making a couple million in revenue, but I know what it means to be like a very large, successful company.
690
You need to be able to make billions in revenue, right?
691
We were so far away from that outcome that it was almost like, yeah, this feels very hard to do.
692
But after pivoting, we had a new lease on life.
693
I actually feel like for us and for me, the part that is the most anxiety-inducing is when we believe we could be doing much better, but there's random inertia, friction that is preventing us from doing the right thing.
694
And even if doing the right thing has a low probability of success, actually starting to work on it is the most free experience that I feel like I've had at the company.
695
I heard you say once an interesting statement.
696
You said you wait until you're drowning in a role before you hire for it.
697
And I just thought it was really interesting because I was always brought up on the value of board members being they highlight hires that you need to make six months ahead so you don't have a bottleneck in six months' time.
698
How do you think about those two seemingly opposing ideas?
699
No, I guess we've had cases where I would say it's a little bit of an anti-pattern on that one.
700
Like for instance, before we hired our VP of sales, we actually closed some very large enterprises inside the company without any salespeople.
701
Some very large enterprises.
702
But because we were able to do that inside the company, we were able to feel the pain of what enterprise sales would look like inside the company.
703
And also, it proved to the person we were going to hire, Graham, that we were an awesome company to potentially work at.
704
So I think it's an interesting trade-off where maybe there's a belief that I have that domain experts are awesome.
705
But if inside the company, you're not able to get an outcome that is 1%, 10% as good inside the company, it's probably not the right time to go out and make the hire.
706
Like, maybe, let me put it this way: the concise way to actually answer this.
707
Startups don't fail because they look like messes inside.
708
Startups fail because they don't do the right thing well enough.
709
That is the reason why they fail.
710
People love to say, hey, like, I don't have this role and that's why I'm not working.
711
And it's like, actually, when you look at the most successful companies, they look like train wrecks inside.
712
What I think is important there is as long as you are doing the basic things that make your product very successful, I think you can actually make these hires like as necessary.
713
I don't think it's like critical that you make them six months in advance.
714
The worst thing for me would be making a hire and for them to not be important on day one and just to be, hey, chill out over here and wait for the next three, six, 12 months, because then they're going to manufacture something to work on and I won't really care about what they're doing.
715
Final one before a quick fire.
716
What did you believe on management that you've changed your mind on?
717
So like for me, as an example, I brought in this incredible person, Julian.
718
He led Workplace in Europe for 10 years.
719
And I always believed, dude, arrogantly as a young person, I could read Elagill's high growth handbook and I know how to manage people.
720
And it's bullshit.
721
The wisdom and experience this guy brought from 15, 20 years leading teams is so nuanced and granular.
722
I learned so much from him about management every day now.
723
You can't learn it in a book.
724
I've changed my mind on that.
725
What would your change of mind be on management?
726
Maybe the biggest change of mind I did have was how large your team is is not a function of like output.
727
And actually ruthless focus is the only thing that matters.
728
So you can have a lot of people, but the answer is if those people are not ruthlessly focused on one thing, you are going to be very, very not.
729
Like, it is, it is much easier to run a company that is focused, that has only one thing that matters than it is to run a company with the same amount of revenue with five things that matters, that with five different priorities.
730
In retrospect, that always feels that that feels obvious.
731
But at a startup like ours, where there's so many things we can do, there's always a couple of shiny things.
732
You can always open Twitter and it's like X is solved, Y is solved, Z is solved.
733
But actually, I think being able to say no to things and to focus on the one thing that matters with many people and ruthlessly optimize that, it's very hard.
734
But when you can actually get that right, you can make magic happen.
735
I could talk to you all day.
736
I do want to do a quick fire, and I have some great quickfire questions for you.
737
So, I'm going to start with one of that I'm adding.
738
Fuck these ones.
739
Neil Mater.
740
I love him as an investor, and I'm an ambassador.
741
So, I didn't see the same Neil Mater that you see.
742
What makes him so special for you as a founder?
743
His ability to analyze companies and be very intellectually flexible is actually pretty remarkable.
744
The breadth of knowledge that he has about all these different businesses, but also to understand what makes them work, what are some of the ways they could improve, and how that could be applicable to us is actually like very awesome.
745
And he's like a very kind person with his time, right?
746
You would assume, given the fact that he works with so many companies, that he would not have a lot of time, but he is extremely generous with his time.
747
Who do you not have on your board that you would most like to have on your board?
748
Actually, I would love to have someone like Scott Cook on our board, as CEO and founder of like an extremely successful software company.
749
I've had a handful of conversations with him, and every time I walk away, just with a deep understanding of just competitive dynamics and just what it takes to run a very enduring, long-term, successful business.
750
Dude, that is a great shout.
751
I haven't had that before.
752
If you had to make Windsurf open source tomorrow, how would you feel and what would you do instead to win?
753
No, I feel like that's a question I've been getting recently.
754
I don't think it would affect much if we had to make it open source because most of the work that it's kind of like the thing I said before, right?
755
You know, Google is, yeah, they have a front end, but the front end is just a single box.
756
And if they open source the front end of Google, I don't think anything would really change about the world.
757
That box or the UX for that was not really the big deal.
758
I am aware of the fact that Copilot has done that, but most of our logic is actually in the back end, ultimately.
759
So I don't think that it would change a ton.
760
I also don't think it would change our adoption of the product.
761
Like most of the differentiation has nothing to do with the fact that the front end is actually open source or not.
762
You have a sibling, they're 18 years old, and they ask you, Should I go to university?
763
What should I study?
764
And how should I position myself best for this new world of work?
765
What do you advise them?
766
Just focus on problem solving, right?
767
How do you like break down problems?
768
Be a high-agency individual.
769
And I think computer science, largely speaking, is just the study of problem solving.
770
Maybe what doesn't matter as much is did you learn X language or Y language, but can you break apart a problem into their distinct pieces and actually go out and execute on them is probably the most important thing.
771
What's one thing that you think OpenAI did wrong that you've learned from?
772
Oh, maybe naming.
773
Let's go with naming on that one.
774
Penultimate one, you can change one aspect of your CEOship.
775
What do you need to change most?
776
I think there are probably some details I shouldn't be actually looking at very deeply that fundamentally don't matter about the long-term success of the company.
777
I'm a person that's very neurotic and I like to understand everything that's happening internally, like what we're spending money on at a level that probably doesn't matter.
778
You can be known for having one impact on humanity.
779
What impact do you want your future generations to say?
780
Varun, my grandfather, he did X.
781
I think the mission of our company is very exciting.
782
And I wouldn't say it's just me, but the team is we want to reduce the time it takes to build technology by 99%.
783
And if we are able to play a meaningful role of how that could shake out in the future, like I would be extremely excited about that.
784
Varun, listen, as I said, I heard so many things from Leigh Marie, from Neil.
785
I was so looking forward to this.
786
You've been fantastic.
787
Thank you so much for putting up with my base level of knowledge.
788
And I so appreciate it, man.
789
No, Ari, this is fantastic, man.
790
Thanks a lot.
791
That was so much fun to do.
792
Now, we would love it if you left a review for the show.
793
It makes such a difference.
794
You can do it on YouTube.
795
You can do it on Spotify.
796
You can find us on YouTube at 20VC.
797
Also, I want your feedback.
798
Ping me, Harry, at 20vc.
799
That's 20vc.com.
800
I want to make the show as good as possible for you.
801
But before we leave you today, I love seeing the team come together to make this show happen.
802
What I don't love is trying to keep track of all the information, the data, and the projects that we're working on across dozens of platforms, products, and tools.
803
That's why we use Coda, the all-in-one collaborative workspace that's helped 50,000 teams all over the world get on the same page.
804
Offering the flexibility of docs with the structure of spreadsheets, Coda facilitates deeper teamwork and quicker creativity.
805
And their turnkey AI solution, the intelligence of Coda Brain, is a game changer.
806
Powered by Grammarly, Coda is entering a new phase of innovation and expansion, aiming to redefine productivity for the AI era.
807
Whether you're a startup looking to organize the chaos while staying nimble, or an enterprise organization looking for better alignment, Coda matches your working style.
808
Its seamless workspace connects to hundreds of your favorite tools, including Salesforce, Jira, Asana, and Figma, helping your teams transform their rituals and do more faster.
809
Head over to coda.io/slash 20vc right now and get six months off the team plan for startups for free.
810
That's codacoda.io slash 20vc, and get six months off the team plan for free.
811
Coda.io/slash 20vc.
812
And while coda keeps the engine running smoothly, Shopify puts the pedal to the metal when it's time to sell.
813
When I was 18, I dreamed about being an investor with zero contacts in the industry, and through persistence, I'm now living that dream.
814
Maybe you're dreaming of your own business, and that's where Shopify steps in.
815
I spend my time exploring successful businesses online.
816
Often, there's a business behind the business driving success.
817
For millions, that's Shopify, powering 10% of US commerce.
818
Shopify offers beautiful templates, AI tools for product images and descriptions, easy marketing campaigns, and 24/7 support.
819
Their number one checkout boosts conversions by 50%.
820
Fewer abandoned carts, more sales.
821
Winner, turn dreams into success with Shopify.
822
Go to shopify.com/slash 20vc for your $1 per month trial today.
823
That's shopify.com/slash 20vc.
824
And while Shopify helps you drive sales, don't forget what really keeps those customers coming back.
825
Trust is the ultimate currency in business, and today customers expect it faster than ever.
826
And that's why over 10,000 global companies.
827
Vanta automates up to 90% of the work for in-demand compliance standards like SOC 2, ISO 27001, and more, using smart AI to centralize workflows, manage risk, and get you audit ready in weeks, not months.
828
So you can stop chasing paperwork and start closing deals.
829
And a new IDC report found that Vanta customers achieve $535,000 per year in benefits.
830
That's insane.
831
And the platform pays for itself in three months.
832
I had no idea about these.
833
Whether you're growing fast or just getting started, Vanta connects you with trusted auditors and experts, support to help you build trust with customers.
834
Get $1,000 off your first year at vanta.com forward slash 20 VC.
835
That's Vanta.com forward slash 20 VC.
836
As always, I so appreciate all your support and stay tuned for an incredible episode with me, Rory, and Jason on Thursday.