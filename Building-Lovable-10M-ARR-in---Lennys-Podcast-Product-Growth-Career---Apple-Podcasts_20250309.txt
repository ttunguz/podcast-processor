Here is the analysis of the podcast transcript, including only the relevant sections:

1. EPISODE CONTEXT
Podcast name and episode focus: 
- Lenny's Podcast with Anton Ock, Co-founder & CEO of Levellable

Hosts and their backgrounds/roles:
- Lenny Rachitsky [Host]: Former Product Lead at Airbnb, author of Lenny's Newsletter 

Guests and their roles/backgrounds:
- Anton Ock: Co-founder & CEO of Levellable, formerly CTO at a YC startup

Featured company overview: 
- Levellable: AI software engineer that takes an English prompt and codes a product in minutes
- Launched a few months ago, hit $4M ARR in first 4 weeks, $10M ARR in first 2 months with 15 people
- Fastest growing startup in Europe

2. KEY INSIGHTS
Insight 1: Levellable enables the 99% of people who don't write code to turn ideas into real products and businesses.
- "The reason why we're doing Levellable is to enable those who have like such a hard time finding people who are included that's great in software. That's been their absolute bottleneck and let them take their ideas and their beings into reality."
- This empowers more entrepreneurship and innovation by providing an AI software engineer for anyone.

Insight 2: Figuring out what to build and assessing if the product solves the actual user problem is becoming more important than engineering.   
- "If I'm putting it together a product today, I would be really obsessed about getting as many skills as possible for each person I hire."
- As AI takes over more of the building, discovery, ideation and taste/craft to ensure the right thing is built will be key product skills.

Insight 3: The team's obsession with the product, users, and working together productively is driving Levellable's fast growth.
- "People love the product. That's the driver of the growth."
- An ambitious mission, hiring people who deeply care, and practices like eating lunch together help the small team move extremely quickly.  

Insight 4: Patience, curiosity, and clear communication are critical for getting the most out of AI tools like Levellable.
- "It takes a lot to master using tools like Levellable and being very curious and patient...is the best way to be productive."
- Being extremely specific about what you want, what's working/not working is key vs. just saying "it doesn't work."

Insight 5: Those who want to succeed in the AI-enabled future should aim to be in the top 1% at using AI tools productively.  
- "The best thing you can do for your current profession, or if you want to have a new job, is to be in the top 1% in knowing how to use AI tools."
- Spending a week using AI to solve an end-to-end problem can get you to the top 1% globally in AI skills.

3. TECHNOLOGY & PRODUCT DEVELOPMENTS
Key technical/product innovations:
- Levellable allows visually editing the generated app instantly without code, a differentiator vs. alternatives 
- Solved key scaling challenges to enable apps to be built reliably without getting stuck
- Upcoming: custom domains, team collaboration, ability to import existing code bases into Levellable

5. TEAM & CULTURE SIGNALS
Leadership philosophy and approach:  
- Inspiring an extremely ambitious, user-obsessed, fast-moving culture is key in a region where that mindset is less common
- "Sees that this is like the time in human history when you have the most impact per worked hour. And that's why we have to be super ambitious."

Team building strategies:
- Look for people who have done something they deeply cared about before and can reason through unorthodox problems 
- Almost always have candidates join a work trial for at least a day, sometimes a week
- Hire for raw cognitive capabilities, bias for speed vs. process, thinking like an owner of the whole business vs. narrow specialization

Company values and priorities:
- Extreme ambition and urgency ("AGI timelines approaching")
- Obsession with the product, users, and team productivity 
- Everyone able to work across disciplines while being world-class in at least one  
- Bias for speed and learning vs. rigid planning

6. KEY METRICS & BUSINESS DETAILS
Growth, revenue and user metrics:
- $4M ARR in first 4 weeks, $10M ARR in first 2 months with 15 people
- Crossed $1M ARR per week within 3 months of launch  
- 300K MAUs, 30K paying users as of February 2023
- Continuing to grow faster than $1M/week

Go-to-market insights:
- Primarily grown through organic word of mouth and building in public on social media
- Planning to help creators using Levellable get more users through paid ads, SEO tips, referrals

7. NOTABLE TECHNOLOGIES 
Novel technical approaches:
- Identified key areas where AI gets stuck building apps (login, data persistence, Stripe integration) and resolved those bottlenecks
- Pushing the bounds of AI "agency" to take higher-level instructions and autonomously handle steps like writing tests, fixing bugs

8. COMPANIES MENTIONED
GitHub: "Once we started creating 15,000 projects per day, so there were a lot of usage, then some engineer maybe woke up in the night and they saw their servers were taking too much load because of us, so then they shut off down completely."
- Levellable was creating 15k new GitHub projects per day for each user, prompting GitHub to temporarily shut them down

Surge: "Once we launched that, that was 21st of November. We just hit like one million in an era in a week and then in kept going and growing at that pace. It's still growing at even faster than that pace."
- Levellable hit $1M ARR one week after launching on Surge, a rapid development platform, and grew from there

9. PEOPLE MENTIONED
Fabian [Co-founder of Levellable]: "I grabbed a previous colleague of mine who has also been a founder, Fabian, and I said, we should build something like GPT engineer but it has to be for the people who don't write code."
- Together with Anton, co-founded Levellable to make an AI code-writing tool for non-technical people

# Transcript


- Levelable is your personal AI software engineer.
You describe an idea,
and then you get a fully working product.
The reason is to enable those
who have like such a hard time finding people
who are included that's great in software.
That's been their absolute bottleneck
and let them take their ideas
and their beings into reality.
- You guys hit four million ARR in the first four weeks.
You had 10 million ARR in the first two months
with just 15 people.
You're the fastest growing startup in all of Europe.
- How did you decide on Levelable as the name?
It's so sweet.
- The best word for a great product is that it's lovable.
A lot of jargon that I like to use
to like emphasize what we should be striving for
is building a minimum levelable product
and then building a lovable product
and then building an absolutely lovable product.
So I took that jargon with me in the company name.
- People wonder just what jobs will be more important,
what skills will be less important.
- Doing a bit of everything, being in general
is I think much more important than it used to be.
If I'm putting it together a product today,
I would be really obsessed about getting
as many skills as possible for each person I hire.
- What have you done that has allowed you
to grow this fast with so few people?
- People love the product.
That's the driver of the growth.
- Today my guest is Anton OCK.
Anton is co-founder and CEO of Lovable,
which is essentially an AI engineer
that takes an English prompt
and codes a product for you in minutes.
You can then talk to it, iterate on the product
and then launch it to the world.
It's one of the fastest growing products in history,
the fastest growing startup in Europe ever.
And as Anton describes,
their goal for Lovable is for it to be the last piece
of software that anybody has to write
because it'll be able to create all future products for us.
They launched just a few months ago
and the first four weeks hit 4 million ARR
in the first two months,
across 10 million ARR all with just 15 people, absurd.
In our conversation, we covered a lot of ground,
including a live demo of Lovable,
how their team operates, how they hire,
what has most enabled their team to scale
this quickly with so few people,
pro tips for using Lovable, how it all started,
how he recommends you build product teams going forward
with tools like this existing,
what skills will matter more and less going forward,
plus how to think about Lovable versus competitors
and so much more.
If you're trying to wrap your head
around how product building will change
with the rise of AI tools,
this episode is a must watch.
If you enjoy this podcast,
don't forget to subscribe and follow it
in your favorite podcasting app or YouTube.
Also, if you become a yearly subscriber of my newsletter,
you now get a year free of perplexity and notion
and superhuman and linear and granola.
Check it out at lennysnewsletter.com.
With that, I bring you Anton OCK.
This episode is brought to you by Cinch,
the Customer Communications Cloud.
Here's the thing about digital customer communications,
whether you're sending marketing campaigns,
verification codes or account alerts,
you need them to reach users reliably.
That's where Cinch comes in.
Over 150,000 businesses,
including eight of the top 10 largest tech companies globally,
use Cinch's API to build messaging,
email and calling into their products.
And there's something big happening in messaging
that product teams need to know about,
Rich Communication Services, or RCS.
Think of RCS as SMS 2.0.
Instead of getting texts from a random number,
your users will see your verified company name and logo
without needing to download anything new.
It's a more secure and branded experience.
Plus you get features like interactive carousels
and suggested replies.
And here's why this matters.
US carriers are starting to adopt RCS.
Cinch is already helping nature brands
send RCS messages around the world.
And they're helping Lenny's podcast listeners
get registered first before the rush hits the US market.
Learn more at getstarted@cinch.com/lenny.
That's S-I-N-C-H.com/lenny.
This episode is brought to you by Persona,
the adaptable identity platform
that helps businesses fight fraud,
meet compliance requirements and build trust.
While you're listening to this right now,
how do you know that you're really listening to me, Lenny?
These days, it's easier than ever
for fraudsters to steal PII, faces and identities.
That's where Persona comes in.
Persona helps leading companies like LinkedIn, Etsy and Twilio,
securely verify individuals and businesses across the world.
What sets Persona apart is its configurability.
Every company has different needs,
depending on its industry,
use cases, risk tolerance and user demographics.
That's why Persona offers flexible building blocks
that allow you to build tailored collection
and verification flows that maximize conversion
while minimizing risk.
Plus, Persona's orchestration tools
automate your identity process
so that you can fight rapidly shifting fraud
and meet new waves of regulation.
Whether you're a startup or an enterprise business,
Persona has a plan for you.
Learn more at withpersona.com/lenny.
Again, that's with P-E-R-S-O-N-A.com/lenny.
(upbeat music)
Anton, thank you so much for being here.
Welcome to the podcast.
- It's a pleasure to talk to you, learning.
Great to be here.
- I don't know how you have time to do this podcast.
Your life must be insane these days
with the pace at which you guys are scaling,
just how much is changing in AI every day.
So I just extra appreciate you making time for this.
I think you said it's 10.30 year time
is when we're doing this.
- I'm a bit tired, yes.
Mostly from the crazy pace of everything.
- We're gonna, this is gonna be an invigorating conversation.
- Yes.
- And you're not gonna be able to sleep.
- I'm sure, I'm sure.
- Okay, so for folks that are maybe a little bit familiar
with Lovable or not at all familiar,
what's just, what is Lovable?
What's the simplest way to understand it?
- I'd say Lovable is your personal AI software engineer.
You describe an idea and then you get a fully working product
from the AI and what this means is that entrepreneurs,
actually, today they turn their ideas into real businesses.
And we have a lot of the signers and product managers
that create the first version of their product ideas
to show to the teams and some of them become founders
because of like their empowerment from this.
But also developers themselves,
they're actually writing code
or creating products much faster.
And I mean, the reason it's pretty obvious for me
is I'll spell it out, but I'll spell it out.
The reason why we're doing Lovable is that,
I don't know about your mom,
but my mom doesn't write code.
And saying to my friends,
almost all my friends throughout my life
are reached out for health.
Like Anton, I need to build something.
How do I find a great software engineer?
And we're building for this 99% of the population
who don't write codes.
Currently, if you're technically inclined,
you get much further, but over time,
naturally, the way to build a software
is by just talking to an AI.
That's how it sits.
- I love the way that you guys describe it.
And you didn't mention it,
but I think it's like building the last piece of software
ever, how do you phrase that?
- Yeah, we say we're building the last piece of software.
- The last piece of software.
Okay, we're gonna do a live demo, but first of all,
can you just share some stats on the scale
of this business at this point,
because it's quite absurd?
- Yeah, so we launched lovable less than three months ago,
and now we have 300,000 monthly active users
and 30,000 of those are actually paying.
And the end is growing at the same rate.
It's just almost only through organic world.
- Okay, and I'll share a couple of stats
in terms of revenue, just so folks know this,
and we'll have this in the intro too.
I think you guys hit four million ARR
in the first four weeks.
You hit 10 million ARR in the first two months,
with just 15 people.
You're the fastest growing startup in all of Europe.
And you guys had to rewrite your entire code base recently,
and you couldn't ship any new features for a while, is that right?
- That's right, yeah.
People are saying like, oh, you're shipping so fast,
then we were all quite frustrated,
because we wrote our service in this kind of scripting language,
and then as we started scaling,
we were just now we had to throw everything away
and rewrite it in a more performant way.
- Okay, before we get to the demo last question,
you shared there's some companies
that have started based on lovable.
I didn't even know that.
So what are some examples of companies/businesses
that have launched off of lovable now are actually companies?
- I mentioned the signers using lovable,
and one of our early users, Harry,
he started shipping real web apps to his clients
instead of just shipping the signs.
And then he went on to say,
okay, wait, I'm going to start an AI startup.
And his company launched on product hunt
and everything and making money is just like,
let's anyone upload their photo library,
and then it's got like the AI is in process
and categorizes it.
And if you go to launched.lovable.app,
like this is an app that will be lovable,
which is a product hunt version
where you can see a lot of businesses
or small sites in future there.
- Okay, cool.
So we're going to come back to some of this stuff,
but let's get into demo.
I rarely do demos on this podcast,
but I'm finding that I think it's really important
for people to see these products in action
because in a large part,
this is the future of product building.
And a lot of people hear about, oh, yeah, AI is coming.
And I don't think a lot of people actually see
what the latest tools are capable of.
And so I love showing these sorts of things on this podcast.
- So, Slenny, I was thinking,
did you ever consider making a copy
and will your own Airbnb?
- I haven't, but go on.
- How about you do that?
- Let's do it, let's do it.
Okay, so we're going to make our own Airbnb.
- Okay, so I just put in
the first prompt for an Airbnb clone.
- Okay, and what's the prompt?
Just for folks that aren't watching it.
- Two words, Airbnb clones, that's the problem.
I like, it just starts simple.
And then what you get is that the AI says, okay,
I'm going to go through what doesn't beautiful Airbnb clone
looks like and it goes through a bit of like decision,
design decisions.
And then I'll zoom out to see more of it.
We have just a UI that is,
I mean, it has all the nice things you would expect
from Airbnb clone where you see different categories
and you can see two listings from Airbnb
with login buttons and everything.
So far it doesn't have the functionality of Airbnb,
it just has the UI.
I would now ask for an improvement
on some of the functionality.
Like if I'm switching category,
I want to see different listings, let's say.
But if you have any thoughts
on what we should build next, let me know.
- Okay, and so you had this preloaded,
so you didn't see how long it would take,
but how long would this normally take
for it to just write all this code and have it for you?
- The first prompt takes 30 seconds.
- 30 seconds, okay.
And it's like a very good copy of Airbnb.
Yeah, I love that you didn't have to show it a design,
you just tell it Airbnb and it knows.
Okay, so your question is what would I want to add
to my own version of Airbnb?
- Well, I've always wanted to explore buying the place
that I look at just like, is this for sale?
So what if we see what that would feel like
if you're just like a way to buy a listing?
- Okay, okay.
So let's, how about we add,
I mean, prompting is important here.
So let's be specific.
But we would ask, creating an add a button on the listing
which has purchased this Airbnb home.
Is that it?
- Perfect.
And I've got all this.
I mean, I'll be even more specific.
It will pop up a model to purchase the listing.
- Perfect.
And I love, so I think something as you're typing,
I'm just gonna share thoughts as you're doing this.
So the site that you asked this AI engineer to build,
like it's actually a functioning website
that you can browse around.
It's not just a design.
The say, obviously there's no like actual listings here.
Like there's an actual houses here.
Say you were trying to like actually build Airbnb
and you wanted to start adding like actual homes
that plug into this.
How does that sort of step work?
- So as you say, this is just kind of the mock-up UI,
but it's also interactive.
If I want to log in and listing management,
then we would connect something called the backend.
So where data is stored,
where users log information is stored.
And I can show you how to do that.
First, let's just try out where we got with this short prompt
or adding the purchase listing.
And it didn't do exactly what I wanted.
I said a button or I didn't say what a button should say,
but it says book now.
And if I click book now, I get a booking confirmation.
So the AI was like, okay,
it didn't really, it was probably surprised
by you wanting to buy the listing
since it's Airbnb, right?
So it says book the listing,
but it shows a pretty model where I can click confirm and pay.
And then it says booking confirm.
- I'll just say real quick,
I love that this is actually a really good example
of why being a good product manager is important.
A lot of wasted time happens when you're not clear
about the problem you're trying to solve
and why you're trying to solve it and all that kind of stuff.
So it's really cool that this is a use case
where you have to be really good at explaining
what it is you want.
- And it's interesting.
You don't have to tell this AI why.
Humans want to understand why is this important.
Mostly need to be very clear about what it is you're doing.
And I love that it's a really strong PM skill.
PM is really good at that.
So we have to.
- Hey, explaining exactly what you expect
and what you're not getting,
even more important with AI than with humans.
But so I'll go into hooking up
more of the actual functionality.
But first, I'll actually show you something
like how was the fastest way to change what went wrong.
It's created buttons that say book now.
And I want them to say bye now.
And what I could do is select this item
and say change it to bye now.
But what we just released is that you can actually edit this.
Like this is a fully functioning product,
but you can edit it visually.
Like you're doing square space and weeks and so on.
So I'll just change the text to bye now.
And then it instantly changes.
It actually changes like deep down in the code base,
but it's very fast to do that.
- So I think people listening to this and seeing this,
if you're not aware,
like this is the cutting edge of tools like this.
No other tool out there lets you generate code
from an AI engineer.
And then actually just like change a small element of it
of every other tool that I'm aware of.
You have to like ask the agent, do this for me.
And then you hope that it does the right thing.
So this is a huge deal, which you just showed, right?
- Yeah, no, it says bye now.
- Okay, and that's something you just launched.
- Correct, you just launched this a few days ago.
But I wanted to go into for building the full functionality,
but what it looks like is that you connect
an open source backend as a service.
And that's called Superbase.
And I have this instance to connect to,
that's completely amped teacher.
Like one click to set that up.
And now it's connected to the backend.
It's just like automatically generating
and explaining generating some code
and explaining what I can do next.
And what I would do now is say, let's add login,
let's say, let's add login.
- And where is it actually hosted on the backend?
- Yeah, very general.
- Yeah, so everything can be one click deployed.
And then it's running, it's hosted by a cloud vendor,
which is hosting I think a huge chunk of the internet.
It's called CloudFlare.
And the backend is hosted by also a good cloud provider,
which is called Superbase.
- Amazing, okay.
Let's wrap up the demo.
That was, unless there's anything else,
is there anything else really important
that you wanted to show?
- Don't, I mean, I don't explain what I would do next.
I would say, okay, let's add login.
Let's make the listings editable by the users,
so users can upload listings.
And then this is going to take a bit more time,
but with patience and good prompting skills,
you're going to get to a full working Airbnb.
- That was a really good piece to add.
So basically, like this is getting to a place
where it actually is not so different from actual Airbnb.
People can log in, they can add their home.
You can add internal tools to add listings
for your, say, sales team, ops team.
Basically, it just will allow you to build a marketplace.
- Great. - That looks all like Airbnb.
- Amazing.
Okay, thank you for the demo.
I think for a lot of people, they're like,
yeah, I've seen this kind of stuff for most people.
Like, holy shit, it's unreal.
It's almost like we're taking for granted now.
You can ask an app to build you a whole website.
And that costs probably like a few pennies.
It took like five minutes versus like,
it would have been tens of thousands
and like weeks and weeks
and months even build just a prototype.
- I mean, these tools, as we see here,
they're already very good.
Like it looks really good as well.
But mainly, I would say they're getting better very, very fast.
And I'd say like one of the bigger bottlenecks is now,
they're not integrated into the current way
that you have your existing products and so on.
But it is getting better so fast, so fast.
I think the best thing for people
who are interested in this
or like interested in just being a part of the future economies
get your hands very dirty with these tools.
Because being in the top 10%
and using them is going to be
to absolutely set your part in the coming months and years.
- So let me follow that thread.
So say you are magically able to sit next to
everybody that is using lovable for the first time
and you could just whisper a tip in their ear
to be successful with lovable.
What would that tip be?
- It takes a lot to master using tools like lovable
and being very curious and patient.
And we have something called chat mode
where you can just ask and like to understand
like how does this work?
Is I'm not getting what I want here?
Am I missing something?
What should I do?
It's the best way to be productive.
It's also one of the best ways to just learn
about how software engineering works,
which is you don't have to write the code anymore,
but it is useful to understand
how software engineering or how building products works.
So I think that's the patience and curiosities
is super useful.
The second part that we spoke about is that being...
If I sit next to you, I would probably say like,
hey, you're not being super clear here.
Like for example, don't say it doesn't work.
Just explain exactly what you're expecting
and which parts are working and which parts are not working.
And that's something that a lot of people don't do naturally.
- I love that like when you have an engineer
you're working with, that is a very expensive mistake
to mis-communicate something,
to just forget about a feature,
to forget about a requirement.
And here it's, you do that and then like 30 seconds later,
you're like, oh, okay, sorry, that was wrong.
And then you could just try again.
- Yeah, that's true.
It might be more costly with humans.
- Okay, and the first step,
so the first step is chat mode.
So you could just, so your advice is chat with the,
what do you call it?
Do you call it an agent?
What's like the term for the thing that you were talking with?
- Yeah, Lovable is an agent.
- Just Lovable.
- Okay, so you're talking about Lovable.
By the way, where did you,
how did you decide on Lovable is the name?
It's so sweet.
- I think it's all about building, I mean, a great product.
That's what I want more people to be able to do.
And the best word for a great product
is that it's Lovable.
A lot of jargon that I like to use to like emphasize
what we should be striving for
is building a minimum Lovable product
and then building a Lovable product
and then building an absolutely Lovable product.
So I took that jargon with me in the company name.
- That is great.
Absolute Lovable product, A-L-P.
Then here's the new MVP.
Okay, so we talked about this,
the scale you guys have hit at this point.
I imagine it's far beyond 10 million ARR.
Do you share that at this point
or are you keeping that private?
- We don't like it on the numbers,
but I mean, I could probably do a two x Twitter
about this quite soon, yes.
- Okay, so it's far beyond 10 million ARR at this point.
It's one of the fastest growing startups in history,
the fastest growing startup in Europe.
I wanna zoom us back to the beginning.
What is the origin story of Lovable?
Had it all began, what was the journey to today?
- I think I was not impressed by like,
what people were doing with the large language models
were an absolute, especially I was using them way back,
but when chance GPT came out,
they were starting to get really good
at taking a human instruction and spitting out code.
And then people in my team, I was the CTO at a YC startup,
they felt like, oh, Anton, you're exaggerating.
This is not going to change anything in the come year.
So I wanted to prove a point
and I created an open source tool called GPT engineer
where you write something like create a snake game
and then it spits out a lot of code, a lot of different files
and then opens the snake game.
And then I tweeted a video about that
and GPT engineer is today the most popular open source tool
to showcase the ability for large language models
to create applications and it's like 50 something,
something thousand gift top stars
and like the dozen of academic references.
- And I know that I'll just add that GitHub shut you down
because I thought it was some kind of attack
that like how many stars you were getting,
how many people were using it?
- Right, yeah, so that was, that came later,
that that's with Lovable, this is a little bit plural.
Lovable earlier was always creating new projects on GitHub
when someone used Lovable
and we asked them, is it fine?
Like how was the limits here?
They said, are there no limits?
But once we started creating 15,000 projects per day,
so there were a lot of usage,
then some engineer when it was on cold,
maybe they woke up in the night
and they saw their servers were taking too much load
because of us, so then they shut off down completely
and we got this email that said,
oh, you broke some kind of rules
and we didn't know what was going on.
- That's similar to a story I heard
when chat GPT was originally being trained,
Microsoft servers were blocked it
because they thought it was some crawler
and it was just actually like the very first version
chat GPT being trained on data.
Anyway, keep going.
And so I built this tool called the GPT engineer
and I was thinking about,
we're seeing the biggest change humanity will ever see,
I think, where like before you had manual labor
being taken over by machines,
but now it's actually cognitive labor
being done better than humans by machines
and what's the best way to have
some kind of positive impact here?
- It's not to make engineers more productive
which there's a lot of companies using it
to make engineers more productive Microsoft
to build co-pilot and so on,
but it is to enable those who have like such a hard time
finding people who are good at creating software
that's been their absolute bottleneck
and let them take their ideas
and their beauty into reality.
So enabling more entrepreneurship and innovation
by building the AI software engineer for anyone.
And then I grabbed a previous colleague of mine
who has also been a founder, Fabian,
and I said, we should build something like GPT engineer
but it has to be for the people who don't write code.
And that's the source.
- Okay, and then that became lovable.
There's like the shift from open source
into a product that anyone can use
but also pay for, makes sense.
Okay, so from that point,
I saw a stat they started making $1 million in AR per week
and once you launched lovable, is that true?
- Yeah, so we launched so we actually called
the first version of the product like GPT engineer app
and that was very different in some ways
and we launched that under a wait list
and so like, oh yeah, we have this wait list
and we got a lot of feedback and iterated.
Finally, when we thought the product was really good
we said, okay, now we have a lovable product
and it was mainly on the AI
that we did a lot of improvements.
Once we launched that, that was 21st of November.
So that's almost three months ago.
We just hit like one million in an era in a week
and then in kept going and growing at that pace
if kids still growing at even faster than that pace.
- Faster than one million AR per week.
- Yep. - Holy shit, okay.
- That sounds like product market fit to me.
You said that you did a lot of work on the backend.
I say you tweet about this that you guys figured out
some kind of unlock on scalability
like a new scaling law that allowed you to build something
like this.
What can you talk about there that kind of
on the technical element allowed you to build something new
and the successful?
- There are many scaling laws I would say
when you build AI systems and this one in particular
is about when you put in more work,
this is the product reliably gets better and better.
And what you've seen generally
when you have AI building something
is that it kind of gets stuck in some place.
It starts, it's super good in the beginning
and that it gets stuck.
What we did was to painstakingly identify places
where it goes stuck and there's different approaches
but address like different ways how we do it
but address the places where it gets like tuned
and power system quantitatively
and having a very fast feedback loop
to improve it in the areas where it goes stuck,
the most important areas.
It still does get stuck sometimes
but that's the scaling law
and we're still early in that scaling law I would say.
- And so when you talk about things getting stuck,
it's like the AI agent just saying,
like I don't know what to do from this point
or like they introduce some kind of bug.
Is that an example of getting stuck?
It introduces some kind of bug
and then it's not smart enough to figure out
how to get out of that bug.
- I see and this is a common problem.
People have a tool like this
as they like get to a certain point
and then it's like, well, I don't know what to do.
I'm not an engineer.
Like here's a bug it's running into
where the infrastructure is built the wrong way.
And so it sounds like one of the paths
to solving that is what you're describing
as you make the AI smarter to get,
to avoid more and more of these places.
They get stuck.
Another is people just learning how to get AI unstuck.
This is something when we had Amjad on the podcast
from Replady said that this is like the main skill
that he thinks people need to learn is how to unstuck AI
when it runs into a problem.
Just thoughts there.
I don't know anything along those lines come up
as I say that.
- I mean, this is something that is a problem today.
And the frontier of where this is a problem
is very rapidly like receding back.
So what we did was to identify the most important areas.
Like, oh, so specifically adding login,
creating data persistence,
adding payment with Stripe.
Like those are the things that we make sure
it doesn't get stuck on, for example.
And the places where it gets stuck today
is currently something that you can use being very good
at understanding and getting unstuck,
but in the future it won't be so important.
This is just going to not get stuck.
- And I know you're not talking super in depth about this
'cause this is one of your unfair advantages,
this kind of stuff you figured out.
So I'm not gonna push too far.
I don't know, I know you want not everyone
to do exactly the same stuff.
So I wanna zoom back to the pace of growth
that you guys have seen.
One of the big stories everyone's always looking at you guys
of like 15 people, 10 million ARR in two months.
It's absurd, it's something.
I don't know if it's ever been done in history.
If so, it's maybe a couple other AI startups recently.
How have you been able to do this?
What have you done that has allowed you
to grow this fast with so few people?
- I'd like to take credit of having done everything
end-to-end in the product.
But we're building on top of the oil here,
which we have discovered oil,
which is all the foundation models.
And then what we've done is that we're obsessed about
what's the right way to present this to a user,
what's the interface for the human
to get as much out of this as possible.
Packaging together, I showed you in the demo
that how you can add authentication
and making this work seamlessly together as a whole.
That's what we've done.
And then people love the product.
- That's what the driver of the growth.
- For getting awareness, we've mainly been posting
what we've shipped on social media.
That's how people know about us.
- So building in public is how people usually describe that.
So it's like, I think it's like,
you guys have the advantage of the demos
or just like, holy shit, you can do that.
And then you guys share the numbers
that you guys are growing assets,
innately interesting and shareable.
But I imagine most people have something interesting to share.
I guess is there anything that you think you did
that other companies maybe haven't done
and make the product so lovable?
- I mean, the team is everything in building a great product.
So I just give a big shout out to Tinnitus
within the code.
I aren't within the code recently,
much of the code recently, I would say.
And the, I mean, you own people who have a ship really fast
and have a good taste for like, what is simple,
what's the right abstractions?
And I think that's what we've done differently
and have this obsession for making us making it better
and better and better.
- This episode is brought to you
by the Fundrise Flagship Fund.
Full disclosure, real estate investing is boring.
Prediction markets are exciting, meme coins are a thrill ride,
even the stock market can swing wildly on a headline.
Hello, deep Zeke.
But with real estate investing,
there's no drama or adrenaline
for excuses to refresh your portfolio every few minutes.
Just bland and boring stuff
like diversification and dividends.
So you won't be surprised to learn
that the Fundrise Flagship Real Estate Fund
is a complete snooze fest.
The fund holds $1.1 billion worth of institutional caliber
real estate managed by a team of pros
focused on steadily growing your net worth
for decades to come.
See, boring.
That's the point.
You can start investing in minutes
and with as little as $10
by visiting fundrise.com/money.
Carefully consider the investment objectives, risks,
charges and expenses of the Fundrise Flagship Fund
before investing.
Find this information and more
in the funds perspective at fundrise.com/ Flagship.
This is a paid ad.
Okay, I wanna come back to the team
'cause I know you have a lot of thoughts there.
In terms of writing code,
how much do you guys actually use AI
to write the code that is building levelable?
Like, how does that work on your team?
We have set up levelable
so that we can change levelable with itself.
We have done that.
Since there is a lot of hyper-specific things
in terms of running a separate best way,
we spin up a dedicated computer for each user.
It doesn't do everything.
Levelable doesn't do everything.
So we use the tools that are for developers,
not for the 99%.
Most of the time.
And everyone uses AI all the time in writing code.
It's also in great course for experimentation.
- And other tools like cursor and stuff like that,
like any tools you can generate.
- I think cursor is the one
that almost everyone uses in the team.
- Yeah, okay, cool.
I did a survey recently on tools
that my listeners and readers use in cursor.
Like 17% of all people that read my newsletter
use cursor already, which is absurd.
And you guys are in there too.
Okay, so kind of along these lines,
there's obviously other competitors and companies
in this space, so everyone's always wondering.
You bold, replit, cursor is a different kind of thing.
What's the simplest way to understand maybe how
levelable might be different from say,
bold and replit, which I think are probably the closest?
- The packaging for non-technical people
is what we aim for.
And I showed you in the demo that you can edit the text.
You can reach the change the colors and so on instantly
without having to go into code editor
and without having to wait this about 30 seconds
for the AI to do the full change.
So that's the big way that we think about packaging it.
And then for making sure that this can be used
as productively as possible in a larger team
and something that's different from,
I think all the other tools is that it is synchronized
with the GitHub and that means that you can use cursor
if you're, or the people in your team that want to be
more low level, they can use cursor.
And while the people who don't want to mess
and set up their local file system
and commit to GitHub and so on, they can use slappables.
Not getting stuck is I think the most important thing
for people and that's why we came,
we kind of entered the space late.
We haven't done the same type of marketing
as many others and we're still from the people
that I talked to ranked as the one
that works most reliably.
- I love it.
Okay, so this point about how you can just use lovable
to build a lot of it for you and then get into cursor
to edit and tweak is a really big point.
And you're saying other companies aren't as good at that.
I don't know if any other does that.
- I don't even let you do that, amazing.
Okay, and then what's kind of like the vision
for lovable, like what's the end state of this?
Is this, everybody can build anything they want
sort of thing with a simple way to understand
where you're going in the next, I don't know, five, 10 years.
- I have to say, so we're building the last piece
of software and it is inherently very hard
to predict how the world looks like in five years this day.
It's very hard, but the last piece of software,
how I see that is that it's almost instant
to go from what you want to change in the product
or what product you want to build
to having it fully working and then integrated
with any of your existing systems
or integrated with the kind of a very powerful
third party of providers.
Already today you can just ask, add shots with open AI
and then you get a shot with open AI in your product.
But that's just working perfectly
is something that's coming in the coming two years, I would say.
And then after that, there is a lot of things
in building a product that is not just engineering side, right?
And I think an AI can be very useful
in aggregating and understanding your users.
So if you use the analytics tools,
you know that there is something quite common
which is to see how users are interacting with the product.
AI can do that on absolutely massive scale
and propose changes to humans to say like,
oh yeah, that sounds like a good change,
make it a bit more intuitive.
And it can also automatically run spin out A/B tests
so that you can see the data
or this improvement to the product.
So I think that's on the horizon as well,
and quite soon.
- Like what's interesting about this in one way
is people wonder just what jobs will be more important,
what skills will be less important.
Let me share a thought I have
and then I wanna get your take and see where you go with this.
It feels like what is getting more valuable
is being good at figuring out what to build
and then knowing if the thing you have built
is correct and good and ready.
So it's like discovery, ideation, idea, part of the step
of launching a product and then it's like taste and craft.
Just like, is this the thing?
Is this gonna solve people's problems?
Because the building now is being done more and more
and it's interesting.
It used to be the reverse engineering
was the hardest, most valuable skill.
And now it's like figuring out what to build.
You could sit there and you can just tell it what to build.
And a lot of people get to your screen, I'm sure,
and they're like, I don't know what to build.
I don't know what people want.
And it's like, that's the thing now.
So just reactions to that and thoughts
on what skills will matter more and less.
- I mean, if you're a founder or you want to build something,
yeah, I totally agree that figuring out
what are pin points and seeing,
like there are pro often currently solutions to every,
some kind of solution to everything.
What is the, and how can you make these 10x better?
So somehow like figuring that out is super important.
When you have an existing product,
then I think taste, and like if I had the tasting,
what is good is even more of the important part.
Like the engineer skills that is still going to be important
because that helps you understand what are the constraints
or what you can build.
And I just think a lot of software engineers
are probably a bit scarier now.
Like, okay, am I out of a job?
What's going to happen?
But they should see themselves as the people
who translate the problems that are stated by a human,
probably to a technical solutions.
And, but they do have to abstract themselves
up a few steps, not just like looking up
in their tech stack, like, oh, I can just do the front
and changes.
They, engineers or technical people are very good
at understanding what are the constraints technically
and they should see themselves as that translators.
- Is there like a, like, is there almost like
do you want to be, learn the eng manager skill
of overseeing engineers versus like the actual engineering
skill or do you think it's still going to be really important
to learn how to code and be really good at that?
- I mean, doing a bit of everything, being in general
is, I think, much more important than it used to be.
And if I'm putting together a product to today,
I will be obsessed about getting as much of as many skill sets
as possible for each person I hire, you're like,
they should know how architecting a system
works preferably.
They should know the sign, they should know
they should have a product taste,
they should know how to talk to users.
I think everyone should be able to know
should know a bit of that, what are that preferably?
- Easier said than done.
It's hard to find people that know all these things.
So let's segue to hiring and how you hire.
How many people do you have at this point?
Is that, some you sure?
- Yeah, now we're at 18.
- 18, okay, wow.
So, I love that you, it sounded like you're about to say,
oh, we have 100 people now, no, 18, okay.
So you went from 15 to 18, okay, great.
So, what do you look for when you're hiring people?
The way I saw you describe it on Twitter
is you look for cracked engineers,
the best cracked team in Europe, things like that.
I guess just specifically, what are you looking for
when you're hiring?
- I think the most important thing is that people
care a lot and they're not just like,
oh, I'm here for a job, I'm here for being as,
just a passenger on this journey,
but everyone should really care about the product,
the users and care a ton about the team,
how the team works together.
And that you're always contributing to making
the team work more productively together.
And that like care or preferably obsession
gets you a very long way.
And then you do often want to have absolute superpower
in some dimension, to be able to understand
and do as many things as possible,
and have this generalist brain that quickly learns
any skills, but be super, super good in one dimension.
And that's for us, that's mostly cramming as much
out of AI, out of the large language models,
and understanding the entire parameter space
of what you can change to make our product perform better.
- So how do you actually test for these things?
Like some of these things describe anything
everyone's looking for, like they care about the user,
they want to collaborate well, just like when you're,
'cause like you have 18 people building in the company
that's growing more than a millionaire are every week,
like that's an absurd scale.
And the people you've found are clearly world class,
and I think a lot of people are gonna like want
to hire the type of people you're hiring.
So when you're actually interviewing,
how do you suss out some of these things
like their AI cramming skills,
their team building collaboration?
What do you actually do?
- I always ask people what they've done before,
and these people that I'm describing,
they have often done something where they care a lot
about what they've done before.
And they dig into details about the technical things
that they did.
And then, I mean, we do the normal thing of giving,
showing a very hard problem that is a bit unorthodox
that someone hasn't seen before preferably,
and see how they think through the thinking reason,
through that.
Then something that I think is more uncommon is that we do,
I pretty much always have people join the work simulation
for at least a day of no fully.
- Awesome, okay, so work trial, that's awesome.
So basically, they work with the team for at least a day.
You said, like sometimes a week.
- Yeah.
- And I love this point you made about,
they show, they cared deeply about something
they previously worked on,
and you look for just like obsession with the thing
that they built last or something they worked on.
Like what percentage are engineers of these 18?
- So 12 at least write code at least part-time.
- 12 at 18, okay, cool.
When we were setting up, you're like,
oh, our engineer's creating content now.
I think that's a cool example of how people
do a lot of different things.
- Yep.
- Also, okay, so I have your job hosting
that you shared once of like the actual job description.
I'm gonna read a few lines from it.
It's very inspired by Shackleton, right?
- Would you agree?
- Cool, I love it.
By the way, did you write this,
or did you have AI write this job description
where you like create an engineering job description fact?
Let me read it to you.
I don't even know if you may not know
what I'm even referring to.
I'll read a few lines here.
Long hours, high pace,
candidates must thrive under a high urgency
under AGI timelines approaching.
Difficult mission ahead,
honor and recognition in case of success,
those seeking comfortable work need not apply.
And then there's a few other things.
Collaboration, other exceptional minds,
purpose larger than any normal engineering role,
generous share and adventure success.
Amazing.
- Thank you.
- Thoughts?
- Yeah, so I did get some up with the formatting of this,
but then I was mostly me doing the exact pricing
of the different functions.
- So yes, and I love that, you know,
so some people is gonna be like,
holy shit, I'm not signing after this,
but to a lot of people, the people you want is like,
yes, this is exactly what I wanna be doing.
- Great.
- Amazing.
- Yeah.
- Okay, cool.
So it feels like one of the elements of hiring here
is create a really good filter to be clear
about just how intense this is
so that the people that want that are the ones drawn to you.
Okay, and then you're also, you're in Sweden.
Fastest growing startup in Europe ever.
Thoughts on building in Europe/Sweden
versus the U.S. slash San Francisco.
- Yeah, so this ambition level that you're talking about
in the job ad is more uncommon in Sweden.
And I think that is the biggest unlock
that someone like me who's like,
sees that this is like the time in human history
when you have the most impact per worked hour.
And that's why we have to be super ambitious,
like just up to ambition level.
And then we can maybe retire
and have AI take care of most things in society.
And inspiring people to be this ambitious
in a place where the average ambition is lower,
but the talent, the role talent is much more available
is a great recipe.
I think that's a great recipe.
So that's what I think it's some kind of advantage there.
And it is a bit of a double edged sword
but it's some kind of advantage.
- So I'm hearing is like there's incredible people in Europe.
They're just not, they're harder to find
in what I'm hearing is like,
the key is how do you suss them out
and get them to want to talk to you?
- Yeah, and then most people in Europe,
they haven't thought that,
oh, do it going on an extremely ambitious mission
is what I want to do.
So that's figuring out who those are is a big part of it.
- Awesome, okay.
I want to talk about prioritization.
I imagine all these things that I just shared
about just like how ambitious this mission is,
how much you're doing the last piece of software.
You must have a bazillion things that people ask you
to build that you want to build.
What's your approach to deciding
what to prioritize and actually build?
- I just, just top line,
I think identifying what is the biggest bottleneck
was the biggest product problem
and iterating fast on saying,
okay, this is the biggest problem.
Let's really resolve that problem
and then picking in the next one
and not overthinking,
not like dreaming out a long road map.
That's my side of fault.
There's a very, very simple algorithm.
Understanding what is the biggest problem
is not always a simple problem.
I think, yeah, so we spend time as one showed on
talking to users list, reading up on what people are writing,
we have the feature board
for people who do a lot of requests, as you say,
and then when we pick one of the problems,
we're quite engineering led.
For a product like ours, it's hard to have product managers
that are not engineered near, say,
oh, this is what we should do now,
because the right solution to the problem
might be entangled in things that are technical details.
They might be entangled in technical details.
So like, okay, yes, this is the biggest problem,
but we should have this larger technical initiative
that's going to solve all of these problems.
So it's quite engineering led
compared to many other product companies.
- As a truth, I'd be worried
if you guys had a product manager at this point,
and that would not make no sense right now.
I imagine the answer is it's chaos,
and there's no actual defined process,
but just like, what does it look like generally?
Like, what's kind of the cadence you guys operate on?
How do you take an idea to like build it, spec it,
launch it, just like, what does that look like
if you have something?
- If you look back like three months,
we mainly said, okay, let's do this.
We keep planning, and we have like a big jam board
where we have all the main problems,
and then we have kind of ranked them,
which I'll do, we focus on next or this week.
And then we have a demo of where we say, okay,
this are the things we ship this week,
so to get everyone on the same page.
And we do have a bit more of a roadmap now,
and where we say, like, here are,
we're going to make so sure you can support custom domains.
Next, they're going to add collaboration after that,
and the biggest problem now,
or the biggest initiative now that solves the biggest problem
is making the system more agentic.
And that has a bit of a longer roadmap,
but we still do the cadence of weekly planning.
These are the next things we're focusing on this week.
It's mostly, there's a good word for this
that you, I would want you help with,
but polish, like, fixing the bugs and polish this week.
And that was the planning on this.
That was actually, this week, was polish, polish week.
I love that.
How far is this roadmap that you're now having?
I mean, it's clear over the coming months,
but it stretches out three months,
and then in one month, it's probably going to look a bit different.
Okay, and then what are the tools you use
just for folks that want to understand, like, the latest tools?
So you said, "Big Jam, what else isn't that stack of tools?"
I mean, we do so many things in our company in linear,
because it's just an amazing product.
So we do talent application tracking in linear.
Yeah, wow.
And after going through and this thing,
a lot of the other custom tools for that,
linear and then phagem.
So simple.
How soon until one of your engineers is an agent,
engineer, an AI engineer, do you think?
Do you have a sense?
I love to dig into what does that question actually mean.
I think we've been talking about, like,
"Oh, AI, that would require more something playing chess."
That's AI.
If an AI, if a computer can play chess, that's AI.
And now that's like, "Oh, no, that's a chess program."
And we're always shifting this forward and forward.
I think anything that a human doesn't do
is just a smart computer system, right?
So when is a software engineer an agent,
I think it's always going to be just,
we're building in, level is just an interface
that humans interact with to create the software that they want.
And then how we solve that, we said,
it's going to be an agent under some definition.
Yeah, sure, I think so.
But that's less important to this.
OK, I like that.
Let me ask this.
You guys are moving super fast, scaling like crazy.
You described a little bit about your process,
weekly planning, a big jam board of ideas.
And now there's a roadmap that you're kind of thinking
out in the future.
Is there anything else that you found
helps you move this fast that gives you a lot of leverage
over the small team you have to ship quickly and move fast?
There you have it already mentioned.
We work from the office most of the time.
I think it's pretty nice.
Then you can say, hey, I think we're thinking wrong about this thing.
Or shouldn't we actually do this other thing?
Especially, I think lunch, I think lunch together
is a pretty productive hour where you cross pollinating.
I mean, people are constantly thinking subconsciously as well
about how to solve these different problems
and which the most important ones are.
And then being in office has this focus or most of the time
you should be focused.
But you also have this high bandwidth where everyone
has a bit unstructured communication.
I love that.
The answer to the CEO of a company that's
one of the most advanced AI tools in the world
is one of your answers to how to move fast is lunch together.
I love that.
That's so human.
And so it makes all the sense in the world.
But I love that that's still a part of this.
Yeah.
OK, you talked about this kind of on the same thread.
You talked about if you were to start in a team, like a new product
team today, say you were head of product somewhere
or head of RPM, VP of product somewhere,
building a new product team, scaling a product team.
What would you do going forward that's
different from what people have done in the past in terms
of who you're hiring, how you're structuring them,
that kind of thing, just like, what do you think people should
be thinking as they build product teams going forward,
knowing tools like Levelable Exist and all the other stuff
that's going on.
I mean, everyone should be excited about using AI.
I think that's a pretty big one.
And then the team working really well together is the launch.
You have to like to sit down and solve problems together.
You should-- at the bottleneck for most products these days,
it's not going to be as much on engineering
but having good taste, good intuition about your users.
And that's, I mean, engineers and everyone, preferably,
in the team should have that willingness, at least,
to want to go through that motion and listen to the users
and truly understand what they care about.
Well, it's kind of like the background
of most of the engineers and people you've hired.
Are they like-- is there anything like in common?
Are they just super impressive humans, generally?
Champions of programming contests, stuff like that.
And what are some attributes of the folks you've hired so far?
I think role, cognitive capabilities,
the strongest-- the strongest correlate
of being a lovable, but there is this dark up mindset
that I think is also very strong.
Being a bit more--
being much more interested in moving very fast
and iterating fast and having a lot of structure,
a lot of process, and thinking about the business
as a whole, more than thinking about my specific profession,
my specific craft that I'm seeing myself
like wanting to dig in into on me.
Amazing, OK, so smart-- like very smart,
entrepreneurial, acts like an owner.
Doesn't just-- isn't just like-- doesn't just a job,
but they feel like they actually have agency, OK?
This is great.
There's something you said, kind of along these lines,
that I think is important.
One of the things that gets you excited about what you're
building is giving people superpowers
and especially people that don't out of code.
Basically 99% of people, is there anything along those lines
that you think is important to share?
It's very clear to most people who have been engineers
or have been founders that there's so many
that have failed in their endeavors
because they didn't have someone that know how
to solve the technical parts.
And now that we're just close to having people
know that it's supposed to exist and they solve everything.
It's going to be an explosion of entrepreneurship
and better software product.
We're not going to settle for all the annoying, bad technology
that we use today.
And everyone who has an idea is going to say, like, OK,
I'm going to build this thing and show you
that this is the best version of the product
or what our company should be doing
instead of having long meetings or writing up documents.
So it's going to be empowering across a lot of different professions
and the places in the world.
What's next relovable and what's the next few things
they might launch as this episode comes out?
I mentioned this agentic behavior.
And when I say agentic, what it means
is that you give more freedom to the system
to decide what happens next.
It might want to write a test, run those tests,
and say, go to the test fail, let's fix those.
So that's one of the big unlocks for getting further faster.
And then there are some more obvious things
that you want to do to go all the way to--
easily go all the way to making money with lovable.
And that's how do you set up so that it's hosted
on your specific domain?
How do you collaborate seamlessly with your team?
I'm making that that is here.
So that's just obvious things.
And something we're thinking about
is to help just founders succeed after they
built their first version.
And how do they get more users?
How do they get feedback?
How do they get the word out if they build something useful?
I was just going to say that, but that's exactly where my mind went
is everyone's going to be building all these things.
No one's ever going to get any traction with these tools.
Because no one knows how to find users,
get anyone to basically go to market and growth
is like a whole different skill.
So that is so cool that you're thinking about that.
How do we run some paid ads for you?
How do we think about SEO?
How do we think about word of mouth,
reality referrals?
That is very cool, OK?
And we already have some playbooks
that we have today, people building with how do you
do those things that you can find up on a blog?
Interestingly, this makes me want to buy some meta stock
because all these apps that everyone's building,
they're going to be running paid ads on Facebook and Google.
Oh my god, what a good business those other guys get.
I want to come back to-- you said
that you can work on your existing code base.
This is actually a big question for a lot of people.
They see all these tools.
They're all amazing for prototypes and concepting.
You talked about how you can actually do this
within your existing code base, use lovable.
Let me correct you there.
Do you use it on any existing code base?
Got it, got it.
We kind of have a research preview of importing your code base.
But what you can do is if you start in lovable,
then you can have engineers editing it,
how in whatever tool they want to use for editing it.
OK, cool.
That's great clarification.
So I guess just four people-- because a lot of--
like most listeners here are not building something brand new.
They're working within an existing product.
So you're saying that that is coming.
You can use lovable in the future in some form
with your existing app and product.
Great.
Wow, that's huge.
OK, because that's basically the most people.
So that's going to be a big deal.
OK, final question.
We have the segment on this podcast called "Failure Corner,"
where most people come in this podcast.
They show all these stories of success,
and everything's going great, and here's all the things always
winning.
You guys-- this is a good example.
It's just up and to the right.
The fastest-scurrying product ever.
What's an example when something totally
failed in the course of your career,
and what did you learn from that?
I'm a bit hard-pressed to find something that totally failed.
But I think there's a bit of a product lesson
where I was the first employee at an AI startup
here in Stockholm called The Summer Labs.
And the premise was just, OK, so humans learn in different ways.
If you personalize, then you get two standard deviations,
more effective learning.
So there are a lot of products, like education software,
that helps you learn.
That is not personalized.
And we were building an API to personalize learning.
And the AI in Seoul, I mean, it was pretty good.
But the thing that we were doing in the end
was to say, OK, here's this product.
Someone has built a product or some way
to learn where it would be English and think-do-ling-o.
And then the people that have that product
have to use this advanced AI API to start making it personalized.
And it was very hard retrofitting.
Oh, you have to switch out the engine and put in this AI.
And the big learning here is it didn't work very well for the company.
I mean, the company wasn't super successful in this.
The big learning is that you have to start with,
how is this product working end-to-end and then add AI?
Or think, where should we add AI?
So that was a big learning for me that you really
want to see what is the big picture of the user?
What's the big picture of how do you
think the user experience should be?
And then add something with AI to solve specific problems.
And now someone loves doing great,
but it's not on top of that product specifically.
I think it's a lot of people who hear this and are like,
of course, but I think it's so hard to actually remember
this point when you have some cool tech and you're like,
oh, shit, everyone needs to try this.
They're going to love it.
And then you don't realize, no one actually cares
if it's not solving a problem for them.
There's a lot of novelty products that everyone
want to use for a little bit and then forget it.
And it's not-- I don't actually need this often.
And so with this makes me think about is,
there's all these product lessons for what
is likely to help your product be successful.
And a tool like Lovable can help you do this.
Because if someone is building something,
you can guide them.
OK, what's the problem you're solving for somebody?
How many people have this problem?
How much does this matter to them?
Maybe we should add the learning modes.
It activates in Lovable.
It activates like this product coach.
That would contain questions.
Hold on.
What are these?
What?
Let's take a step back.
[INTERPOSING VOICES]
Everyone's going to be like, keep it out of my way.
Yeah, exactly.
Yeah, what's your experiment plan?
I think there's actually a big opportunity there
to save people.
Because there's a play around with this thing.
And then there's like, OK, but it really
is anything people actually want.
I love it.
We call it learning mode.
Is that fine with you?
100%.
Awesome.
Let's do it.
I'll license you.
No cost.
Sure.
OK, OK, we made a deal here.
Let's do it.
OK.
Anton, is there anything else that you
wanted to share anything you want to leave listeners with
before I let you go and go to sleep?
I think, again, the world is changing quickly.
And it's very fun.
You should see this, like, have fun in a lot of this change.
And the best thing you can do for your current profession,
or if you want to have a new job,
is to be in the top 1% in knowing how to use AI tools.
So go out there, use lovable, use other AI tools,
and become-- make sure to understand
or try to understand as much as possible
and how to use them productively.
And that's something I tell all my friends in the generally.
And I love the audience to know as well.
OK, well, I've got to try to make this even more specific
for people.
How do you know if you're in the top 1%?
Like, what's a heuristic almost of, like, slash?
How do you get there?
Is it just use it 100 times a day?
What else?
What can you recommend?
Yeah, I think if you spend a full week on trying to reach
an outcome, the best way to learn is, like,
I want to do this thing.
And then I want to use AI to do that thing.
And then you've spent a full week.
You're in the top 1% in the global population.
If you have friends that use around yourself with friends
who have this obsession or they also care a lot about this,
then you'd be quickly in the top 0.1%.
So what I'm hearing is, like, find a problem that can be solved.
Like, find a problem, a pain point for yourself or someone.
And then end-to-end, like, fully solve that problem,
spend a week getting from idea to, like, a thing that was actually--
somebody's actually using.
Yeah.
And you're in the top 1%.
Yeah, I think you fit at the top.
Yeah, at the bottom present, we're just spending a full week
and making-- like, asking AI if you don't understand,
so making sure that you can understand.
Yeah, like, that's the thing, people forget.
You just ask, like, like, would you
ask the chat feature of lovable, in this case?
Or would you go to cloud or chat GPT to ask for advice?
I mean, my recommendation here, if you're in product,
is to use lovable to build software and learn that AI tool.
And then you should use chat mode.
And chat mode, have to add, is something
you activate in your user profile.
It's not launched, like, in the main product.
So it's in labs.
But if you actually add that flag, then you can use chat mode.
If you want to learn some other AI tool,
then you should-- I mean, you ask that tool or ask cloud
or chat GPT about how that topic, that domain, works.
OK, amazing.
Where can people find you?
Where can they find lovable?
And how can listeners be useful to you?
Lovable posts, updates, and links
on lovable_dev on Twitter.
We post things on LinkedIn as well.
And there are a lot of things coming out and changing
in how we build software.
So you can follow lovable_dev, and you
can follow me @AntonOzika at Twitter.
I'd love more feedback on where people see--
this is a huge change for them.
There are a lot of people posting about that on Twitter.
But they said, we have a Discord where you can share,
like, oh, this is how I use lovable,
and what's super useful to me.
And feedback.lovable.dev, you can ask for new features.
There's a lot of people asking about what features you want.
And that's the most important thing for us.
We just want to solve people's problems.
Amazing.
Anton, you're doing incredible work.
What a journey.
I'm excited to have you back someday when we see more
chapters of this journey.
A lot more to learn.
As do we all.
That's why people listen to this podcast.
Anton, thank you so much for being here.
Thank you so much, Lenny.
Bye, everyone.
[MUSIC PLAYING]
Thank you so much for listening.
If you found this valuable, you can subscribe to the show
on Apple Podcasts, Spotify, or your favorite podcast app.
Also, please consider giving us a rating or leaving a review,
as that really helps other listeners find the podcast.
You can find all past episodes or learn more about the show
at lennyspodcast.com.
See you in the next episode.
(gentle music)

