
(upbeat music)
- Hey everyone, welcome to The Lady in Space Podcast.
This is Alessio, partner, and CTO adassable partners.
And I'm joined by my Carlos Swix, founder of small AI.
- Hey, and today we are very blessed
to have our friends, Paul Klein, for the fourth.
- The fourth.
- CEO of browser base, welcome.
- Thanks guys.
Yeah, I'm happy to be here.
I've been lucky to know both of you
for like a couple of years now, I think.
So it's just like we're hanging out.
- We're just hanging out with friends in front of us.
- Giant, enormous microphones in front of our face.
Totally normal hangout.
- Yeah, we've actually mentioned you on the podcast,
I think, more often than any other Solaris tenant.
Just because you're one of the best performing,
I think, LLM tool companies that have started up
in the last couple of years.
- Yeah, I mean, it's been a whirlwind of a year.
Like browser base is actually pretty close
to our first birthday.
So we are one years old and going from, you know,
starting a company as a solo founder
to, you know, having a team of 20 people, you know,
a series A, but also being able to sport hundreds
of AI companies that are building AI applications
that go out and automate the web,
it's just been like really cool.
It's been happening a little too fast.
I think like collectively as an AI industry,
let's just take a week off together.
I took my first vacation actually, two weeks ago,
and operator came out on the first day
and then a week later, deep-seat came out.
And I'm like on vacation trying to chill.
I'm like, we gotta build with this stuff, right?
So it's been a breakneck year,
but I'm super happy to be here and like talk more
about all the stuff we're seeing.
And I'd love to hear kind of what you guys
are excited about too and share with it, you know?
- We're to start.
So people, you've done a bunch of podcasts.
I think I'd strongly recommend Jack Bridger's
scaling dev tools as well as Turno Novax, The Peel.
And, you know, I'm sure there's others.
So you covered your Twilio story in the past,
talk about Stream Club, and you got acquired to Mux,
and then you left to start browser base.
So maybe we just start with what is browser base.
- Yeah, so browser base is the web browser for your AI.
We're building headless browser infrastructure,
which are browsers that run in a server environment
that's accessible to developers via APIs and SDKs.
It's really hard to run a web browser in the cloud.
You guys are probably running Chrome on your computers
and that's using a lot of resources, right?
So if you want to run a web browser
or thousands of web browsers,
you can't just spin up a bunch of lambdas.
You actually need to use a secure containerized environment.
You have to scale it up and down, it's a stateful system.
And that infrastructure is like super painful.
And I know that firsthand,
'cause at my last company, Stream Club, I was CTO,
and I was building our own internal
headless browser infrastructure.
That's actually why we sold the companies
because Mux really wanted to buy
our headless browser infrastructure that we built.
And it's just a super hard problem.
And I actually told my co-founders,
I would never start another company
unless it was a browser infrastructure company.
And turns out that's really necessary at the age of AI.
When AI can actually go out and interact with websites,
click on buttons, fill in forms.
You need AI to do all of that work
in an actual browser running somewhere on a server,
and browser-based powers that.
- While you're talking about it,
it occurred to me, not that you're
like gonna be acquired or anything,
but it occurred to me that would be really funny
if you became like the Nikita beer of browser,
headless browser companies.
Like you just have one trick,
and you make browser companies that get acquired.
- I truly do only have one trick.
And I'm screwed if it's not for headless browsers, you know?
Like, I'm not a Go programmer, you know.
In AI grant, you know, browsers is an AI grant,
but we were the only company in that AI grant batch
that used zero dollars on AI spend.
You know, we're purely an infrastructure company.
So as much as people want to ask me
about reinforcement learning,
I might not be the best guy to talk about that,
but if you want to ask about headless browser infrastructure
at scale, I can talk your ear off.
So that's really my area of expertise.
And it's a pretty niche thing.
Like, nobody's done what we're doing at scale before.
So we're happy to be the experts.
- You do have an AI thing, stay-chan,
which we'll talk about, but yeah.
Yeah, we can talk about the sort of core
of browser-based first, and then maybe stay-chan.
- Yeah, stay-chan is kind of web browsing framework.
- Yeah, yeah, yeah, and maybe how you got to browser-based
and what problems you saw.
So one of the first things I worked on
as a software engineer was integration testing.
Assault Labs was kind of like the main thing at the time.
And then we had Selenium, we had Play-Bri,
we had all these different browser things,
but it's always been super hard to do.
So obviously you worked on this before.
When you started a browser-based,
what were the AI-specific challenges that you saw
versus there's kind of like all the usual
running browser-scale in the cloud,
which has been a problem for years.
What are the AI-unique things that you saw
that traditional purchase just didn't cover?
- Yeah, first and foremost, I think back to the first thing
I did as a developer, as a kid when I was writing code,
I wanted the right code that did stuff for me.
I wanted the right code to automate my life,
and I do that probably by using curl
or a beautiful soup to fetch data from a website
and parse that data.
And we all know that now taking HTML
and plug that into an LLM, you can extract insights,
you can summarize.
So it was very clear that now dynamic web scraping
became very possible with the rise of large language models
or a lot easier.
And that was like a clear reason why there's been
more usage of headless browsers,
which are necessary because a lot of modern websites
don't expose all of their page content
via a simple HTTP request.
They actually do require you to run JavaScript
on the page to hydrate this.
Like Airbnb is a great example.
You go to Airbnb.com.
A lot of that content on the page isn't there
until after they kind of run the initial hydration.
So you can't just scrape it with a curl.
You need to have some JavaScript run.
And a browser is that JavaScript engine
that's going to actually run all those requests on the page.
So web data retrieval was definitely one driver
of starting browser base and the rise
of being able to summarize that with an LLM.
Also like I was familiar with like,
if I wanted to automate a website,
I could write one script and that would work for one website.
It was very static and deterministic.
But the web is non-deterministic.
The web is always changing.
And until we had LLMs, there was no way to write scripts
that could, you know, you could write once
that would run on any website.
That would change with the structure of the website.
Click the login button.
Could mean something different on many different websites.
And LLMs allow us to generate code on the fly
to actually control that.
So I think that rise of writing the generic automation scripts
that can work on many different websites,
to me made it clear that browsers
are going to be a lot more useful.
Because now you can automate a lot more things
without writing, you know.
If you wanted to write a script to book a demo website,
a demo call on a hundred websites,
previously you had to write a hundred scripts.
Now you write one script that uses LLMs
to generate that script for each website in real time.
That's why we build our web browsing framework stage hand,
which does a lot of that work for you.
But those two things, web data collection
and then like enhanced automation of many different websites,
it just felt like big drivers for more browser infrastructure
that would be required to power these kind of features.
- Yeah, and what's multi-modality, also a big thing?
Now you can use the LLMs to look,
even though the text in the dome might not be as good.
- Yeah, maybe my hot take is like,
I was always kind of like,
I didn't think vision would be as big of a driver
for UI automation.
I felt like HTML is structured text
and large language models are good with structured text,
but it's clear that these computer use models
are often vision driven.
And they've been really pushing things forward.
So definitely being multi-modal,
like rendering the page is required to take a screenshot
to give that to a computer use model
to take actions on a website.
I mean, it's just another win for browser,
but I'll be honest, that wasn't what I was thinking early on.
I didn't even think that we'd get here so fast
with multi-modal and vision models.
- This is one of those things where I forgot to mention it,
my intro that I'm an investor in browser base.
And I remember that when you pitched to me,
like a lot of the stuff that we have today,
we like wasn't on the original conversation.
But I did have, my original thesis was something
that we've talked about on the podcast before,
which is take the GPT store, the custom GPT store.
All the, every single checkbox in plugin
is effectively a startup.
And this was the browser one.
(laughs)
I think the main hesitation,
I think I actually took a while to get back to you.
The main hesitation was that there were others.
Like you are not the first headless browser.
It's not even your first headless browser startup.
There's always a question of like,
will you be the category winner
in a place where there's a bunch of incumbents,
to be honest, that are bigger than you?
They're just not targeted at the AI space.
They don't have the backing of Nat Friedman.
And there's a bunch of, like you're here in Silicon Valley,
that they're not, I don't know if that was it.
But like that was a interesting--
- Yeah, I think I tried all the other ones
and I was like really disappointed.
Like my background is from working
at great developer tools companies.
And nothing had like the Versailles experience.
Like our biggest competitor actually is partly owned
by private equity and they just jacked up their prices
quite a bit and the dashboard hasn't changed in five years.
And I actually used them at my last company
and tried them and I was like,
oh man, like there really just needs to be something
that's like the experience of these great infrastructure
companies like Stripe, like Clerk, like Versailles
that I use in love, but oriented towards this
kind of like more specific category,
which is browser infrastructure,
which is really technically complex.
Like a lot of stuff can go wrong on the internet
when you're running a browser.
The internet is very vast.
There's a lot of different configurations.
Like there's still websites that only work
with internet explorer out there.
How do you handle that when you're running
your own browser infrastructure?
These are the problems that we have to think about
and solve at browser base.
And it's certainly a labor of love.
But I built this for me first and foremost.
I know it's super cheesy and everyone says that
for like their startups, but it really truly was for me.
If you look at like the talks I've done
even before a browser base.
And I'm just like really excited to try and build
a category defining infrastructure company.
And it's rare to have a new category
of infrastructure exists.
We're here in the Chrome offices
in like, you know, vector databases.
Is a new category of infrastructure?
Is it?
Is it?
I mean, we're in the office.
So, you know, we can debate that one later.
That is one of the industry debates.
I guess we go back to the LMOS talk
that Carpathi gave way longer ago.
And like the browser box was very clearly there.
And it seemed like the people who are building in the space
also agreed that browsers are a core primitive
of infrastructure for the LMOS.
That's going to exist in the future.
And nobody was building something there that I wanted to use.
So I had to go build it myself.
Yeah, I mean, exactly that talk that,
honestly that diagram, every box is a startup.
And there's the code box and then there's the browser box.
I think at some point they will start clashing.
There's always the question of are you a point solution
or are you the sort of all-in-one?
And I think the point solutions tend to win quickly,
but then the all-in-ones have a very tight
cohesive experience.
Yeah.
Let's talk about just the hard problems of browser base.
You have on your website, which is beautiful.
Thank you.
Was there an agency that you used for that?
Yeah.
[INTERPOSING VOICES]
They're amazing.
Herb.
Yeah, it's H-E-R-V-E.
I highly recommend for developer tools founders
to work with consumer agencies.
Because they end up building beautiful things.
And the variations know how to build beautiful interfaces.
So I've got to get proud of them.
Chat apps, apparently, are very fast.
Oh, yeah.
The Mistral.
Chat.
The Mistral.
Yeah, the Chat.
The Chat.
And then your videos as well, it was professionally
shot, right?
Yeah, yeah, yeah, yeah.
And you go to the videos, is that amazing?
Not the initial video that you shot at the new--
First, I was Austin, another video picture for us.
But yeah, I mean, like, I think when
you think about how you talk about your company,
you have to think about the way you present yourself.
As a developer, you think you evaluate a company based
on the API reliability and the P95.
But a lot of developers say, is the website good?
Is the message clear?
Do I trust this founder I'm building my whole feature on?
So I've tried to nail that as well as the reliability
of the infrastructure.
You're right.
It's very hard.
And there's a lot of kind of foot guns
that you run into when running headless browsers at scale.
Right.
So let's pick one.
You have eight features here.
Seamless integration, scalability, faster speed,
secure, observable stealth.
That's interesting.
Extensible and developer first.
What comes to your mind is the top two, three hardest ones.
Yeah.
I think just running headless browsers at scale
is like the hardest one.
And maybe--
Can I nerd out for a second?
Is that OK?
I heard this is a technical audience.
So I'll talk to the other nerds.
Whoa.
They were listening.
Yeah, they're upset.
They're ready.
AGI is angry.
OK, so how do you run a browser in the cloud?
Let's start with that, right?
So let's say you're using a popular browser automation
framework, like Puppeteer, Playwright, and Selenium.
Maybe you've written some code locally on your computer
that opens up Google, it finds the search bar,
and then types in search for latent space
and hits the search button.
That script works great locally.
You can see the little browser open up.
You want to take that to production.
You want to run the script in a cloud environment.
So when your laptop is closed, your browser
is doing something.
The browser is doing something.
Well, we use Amazon at browser base.
The first thing I'd reach for is probably
some sort of serverless infrastructure.
I would probably try and deploy them on Lambda.
But Chrome itself is too big to run on the Lambda.
It's over 250 megabytes.
So you can't easily start it on a Lambda.
So you maybe have to use something like Lambda layers
to squeeze it in there.
Maybe use a different Chromium build that's lighter.
And you get it on the Lambda.
Great, it works.
But it runs super slowly.
It's because Lambdas are very resource-limited.
They only run with one VCPU.
You can run one process at a time.
Remember, Chromium is beefy.
It's barely running on my MacBook Air.
I'm still downloading it from the test earlier, right?
I'm joking.
But it's big, you know?
So Lambda, it just won't work really well.
Maybe it'll work a bit.
You need something faster.
You're using something faster.
OK, well, let's put it on a beefier instance.
Let's get an EC2 server running.
Let's throw Chromium on there.
Great, OK, that works well with one user.
But what if I want to run 10 Chromium instances, one
for each of my users?
OK, well, I might need two EC2 instances.
Maybe 10.
All of a sudden, you have multiple EC2 instances.
This sounds like a problem for Kubernetes and Docker, right?
Now, all of a sudden, you're using ECS or EKS,
the Kubernetes or Container Solutions by Amazon.
You're spending up and down containers.
And you're spending a whole engineer's time
on maintaining this stateful distributed system.
Those are some of the worst systems to run
because when it's a stateful distributed system,
it means that you are bound by the connections to that thing.
You have to keep the browser open
while someone is working with it, right?
That's just a painful architecture to run.
And there's all this other little gotchas with Chromium,
like Chromium, which is the open source version of Chrome,
by the way, you have to install all these fonts.
You want emojis working in your browsers
because your vision model is looking for the emoji.
You need to make sure you have the emoji fonts.
You need to make sure you have all the right extensions
configured, like, oh, do you want ad blocking?
How do you configure that?
How do you actually record all these browser sessions?
Like, it's a headless browser.
You can't look at it.
So you need to have some sort of observability.
Maybe you're recording videos and storing those somewhere.
It all kind of adds up to be this just giant monster piece
of your project when all you wanted to do
was run a lot of browsers in production for this little script
to go to google.com and search.
And when I see a complex distributed system,
I see an opportunity to build a great infrastructure company.
And we really abstract that away with browser base,
where our customers can use these existing frameworks,
play by public or Selenium, or our own stage hand,
and connect to our browsers in a serverless-like way,
and control them, and then just disconnect when they're done.
And they don't have to think about the complex distributed
system behind all of that.
They're just going to browser running, you know,
anywhere, anytime, really easy to connect to.
I'm sure you have questions.
Oh, just my standard question with anything.
So, you know, essentially you're a serverless browser
company, and there's been other serverless things
that I'm familiar with in the past, serverless GPUs,
serverless, I don't know, website hosting.
You know, that's where I come from with Netlify.
One question is just, you know, you promise to spin up
thousands of browsers in milliseconds.
I feel like there's no real solution that does that yet.
And I'm just kind of curious how, the only solution I know,
which is to kind of keep a kind of warm pool of servers
around, which is expensive, but maybe not so expensive
because it's just computer, just CPUs.
So, I'm just like, you know.
Yeah, you nailed it, right?
Like, I mean, like, how do you offer like a serverless
like experience with somebody that is clearly not serverless,
right?
And the answer is you need to be able to run many browsers
on single nodes.
We use Kubernetes at browser-based.
So, we have, you know, many pods that are being scheduled.
We have to predictably schedule them up or down.
Yes, thousands of browsers in milliseconds is the best
case scenario.
If you hit us with 10,000 requests,
you may hit us with a slower cold start, right?
So, we've done a lot of work on predictive scaling
and being able to kind of route stuff to different regions
where, you know, we have multiple regions of browser-based
where we have different pools available.
You can also pick the region you want to go to
based on like lower latency, round-trip time latency
is very important with these types of things.
There's a lot of requests going over the wire.
So, for us, like having a VM like Firecracker
powering everything under the hood
allows us to be super nimble and spin things up
up or down really quickly with strong multi-tenancy.
But in the end, this is like the complex
infrastructural challenges that we have to kind of deal
with at browser-based.
And we have a lot more stuff on our roadmap
to allow customers to have more levers to pull
to exchange.
Do you want really fast browser startup times
or do you want really low costs?
And if you're willing to be more flexible on that,
you may be able to kind of like work better
for your use cases.
- Is this use Firecracker?
Shouldn't Fargate do that for you?
Or did you have to go lower level than that?
- We had to go lower level than that.
- I find this a lot with Fargate customers.
- Yeah.
- Which is alarming for Fargate.
- We used to be a giant Fargate customer.
Actually, the first version of browser-based was ECS and Fargate.
And unfortunately, it's a great product.
I think we were actually the largest Fargate customer
in our region for a little while.
- No, what?
- Yeah, seriously.
And unfortunately, it's a great product.
But I think if you're an infrastructure company,
you actually have to have a deeper level of control
over these primitives.
I think it's the same thing as true with databases.
We've used other database providers,
and I think--
- Yeah, serverless Postgres.
- Yeah, when you're an infrastructure company,
you're on the hook if any provider has an outage.
And I can't tell my customers, like, hey,
we went down because so-and-so went down.
That's not acceptable.
So for us, we've really moved to bringing things internally.
It's kind of opposite of what we preach.
We tell our customers, don't build this in-house.
But then we're like, we build a lot of stuff in-house.
But I think it just really depends
on what is in the critical path.
We try and have deep ownership of that.
- On the distributed location side,
how does that work for the web,
where you might guess serve different content
in different locations,
but the customers expecting, you know,
if you're in the US, I'm expecting the US version.
But if you're spinning up my browser in friends,
I might get the French version.
- Yeah, yeah, it's a good question.
Well, generally, like, on the localization,
there's a thing called locale in the browser,
where you can set, like, what your locale is,
if you're, like, in the EN/US browser or not.
But some things do IP-based routing.
And in that case, you may want to have a proxy.
Like, let's say you're running something in Europe,
but you want to make sure you're showing up from the US.
You may want to use one of our proxy features.
So you can turn on proxies to say, like,
make sure these connections always come
from the United States, which is necessary, too,
because when you're browsing the web,
you're coming from, like, a, you know, data center IP,
and that can make things a lot harder to browse web.
So we do have kind of, like, this proxy super network,
where we'll pick the right proxy for you
based on where you're going,
so you can reliably automate the web.
But if you get scheduled in Europe, that doesn't happen,
as much as you try and schedule is close to, you know,
your origin that you're trying to go to.
But generally, you have control over the region,
so you can put your browsers in.
So you can specify West One or East One or Europe.
We only have one region of Europe right now, actually.
- What's harder, the browser or the proxy?
I feel like, to me, it feels like actually proxying.
- Relatively, SQL, it's much harder.
The spending of browsers, SQL, I'm curious.
- It's all hard.
It's layers of heart, right?
- Well, yeah, yeah, of course.
- I think it's different levels of heart.
I think the thing with the proxy infrastructure
is that we work with, you know,
many different web proxy providers,
and some are better than others.
Some have good days, some have bad days.
And our customers who've built, you know,
browser infrastructure on their own,
they went, they have to go and deal with sketchy actors.
Like, first, they figure out their own browser infrastructure,
and then they got to go buy a proxy.
And it's like, you can pay in Bitcoin,
and it just kind of feels a little sus, right?
It's like, you're buying drugs
when you're trying to get a proxy online.
We have like deep relationships with these counter-parties.
We're able to audit them and say,
is this proxy being sourced ethically?
Like, it's not running on someone's TV somewhere.
- It's a fair chill.
- Yeah, what a great organic proxy is, right?
- We do a level of diligence, we're sock twos.
We have to understand what is going on here.
But then we're able to make sure that like,
we route around proxy providers not working.
There's proxy providers who will just,
the proxy's not working all of a sudden.
And then if you don't have redundant proxy
on your own browsers, that's hard down for you,
or you make it some serious impacts there.
With us, like, we intelligently know,
hey, this proxy's not working, let's go to this one,
and you can kind of build a network of providers
to really guarantee the best uptime for our customers.
- Yeah, so you don't own any proxies.
- We don't own any proxies.
- You're a variety.
- The team has been saying,
who wants to take home a little proxy server,
but not yet, we're not there yet, you know?
- It's a very mature market.
I don't think you should build that.
- Like, you should just be a super customer of them.
- Yeah.
- Scraping, I think is the main use case for that.
I guess, well, that leads us into captures,
and also off, but let's talk about captures.
You had a little spiel that you wanted
to talk about capture stuff.
- Oh, yeah, I was just, I think a lot of people ask,
if they're thinking about proxies,
they're thinking about captures too.
I think it's the same thing.
You can go buy capture solvers online,
but it's the same buying experience.
It's some sketchy website, they have to integrate it.
It's not fun to buy these things.
And you can't really trust in the docs or bad.
What browser-based does is we integrate
a bunch of different capture providers.
We do some stuff in-house,
but generally we just integrate
with a bunch of known vendors,
and continually monitor and maintain these things
and say, is this working or not?
Like, can we route around it or not?
- Please try to just solvers.
- Capture solvers, yeah.
- Not to just provide us capture solvers.
- Yeah, sorry, capture solvers.
- And we really try and make sure all that works for you,
you know?
I think as a dev, if I'm buying infrastructure,
I want it all to work all the time,
and it's important for us to kind of provide that experience
by making sure everything does work
and monitoring it on our own.
- Yeah.
- And right now the world of captures is tricky.
I think AI agents, in particular,
are very much ahead of the infrastructure.
You know, captures are designed to block all types of bots,
but there are now good bots and bad bots.
And I think in the future,
captures will be able to identify who a good bot is.
Hopefully via some sort of like KYC.
For us, like, we've been very lucky.
We have very little to no known abuse of browser base,
because we're priests.
We really look into who we like work with.
And, you know, for certain types of capture solving,
we only allow them on certain types of plans,
because we wanna make sure that we can know
what people are doing, what their use cases are.
And that's really allowed us to try
and be an arbiter of good bots,
which is our long-term goal.
Like, I wanna build great relationships
with people like CloudFlare.
So we can agree, hey, here are these acceptable bots.
We'll identify them for you
and then make sure we flag when we come to your website.
This is a good bot, you know?
- I see.
And CloudFlare said they wanna do more of this,
so they're gonna set by default.
If they think here in AI bot, they're gonna reject.
I'm curious if you think this is something
that is gonna be at the browser level,
or, I mean, the DNS level with CloudFlare
seems more over it should belong,
but I'm curious how you think about it.
- I think the web's gonna change, you know?
I think that the internet, as we have it right now,
is gonna change, and we all need to just accept
that the cat is out of the bag.
And instead of kind of like wishing the internet was,
like it was in the 2000s,
where you can have free content line that wouldn't be scraped,
it's just, it's not gonna happen.
And instead, we should think about like,
one, how can we change the models of, you know,
information being published online,
so people can, you know, adequately commercialize it.
But two, how do we rebuild applications
that expect that AI agents are gonna log in on their behalf?
Those are the things that are gonna allow us
to kind of like, identify good and bad bots.
And I think the team at Clerk
has been doing a really good job with this
on the authentication side.
I actually think that auth is the biggest thing
that will prevent agents from accessing stuff,
not captions.
And I think there'll be agent auth in the future.
I don't know if it's gonna happen from an individual company,
but actually authentication providers
that have a, you know, hidden log in as agent feature,
which will then you put in your email,
you'll get a push notification, say like,
"Hey, your browser-based agent wants to log in
to your Airbnb.
You can approve that, and then the agent can proceed."
That really circumments the need for captions
or logging in as you and sharing your password.
I think agent auth is gonna be one way
we identify good bots going forward.
And I think a lot of this capture-solving stuff
is really short-term problems as the internet
kind of re-oriented itself around
how it's gonna work with agents browsing the web
just like people do.
- Yeah.
Stitch recently was on Hacker News
for talking about agent experience AX,
which is the thing that Netlify is also trying to clone
and coin and talk about.
And we've talked about this on previous episodes before
in a sense that I actually think that's like
maybe the only part of the tech stack
that needs to be kind of reinvented for agents.
Everything else can stay the same,
CLIs, APIs, whatever.
But off, yeah, we need agent auth.
And it's mostly like short-lived,
like it should be a distinct identity from the human.
But paired, I almost think like in the same way
that every social network should have your main profile
and then your alt accounts or your Finsta.
It's almost like every human token
should be paired with the agent token
and the agent token can go and do stuff on behalf
of the human token but not be presumed to be the human.
- Yeah, it's actually very similar to OAuth
is what I'm thinking.
And you know, three from Stitch is an investor,
calling from Clerk, Octaventures,
all investors in browser-based because like,
I hope they solve this
'cause they'll make browser-based as mission more possible.
So we don't have to overcome all these hurdles.
But I think it'll be an OAuth like flow
where an agent will ask to log in as you.
You'll approve the scopes.
Like it can book an apartment on Airbnb
but it can't like message anybody.
And then, you know, the agent will have some sort of like
role-based access control within an application.
- Yeah.
- I make sense of that.
- The trick part is just there's one layer of delegation here
which is like, you're offering my user's user
for something like that.
I don't know if that's tricky or not.
Does that make sense?
- Yeah, you know, actually at Twilio,
I worked on the login identity and access management teams,
right?
So like I built Twilio's login page.
You would turn on that team
and then you became the lead in two years.
- Yeah, yeah.
I started as an intern in 2016
and then I was the tech lead of that team in two years later.
- That's not normal.
- I didn't have a lie.
He's not normal.
- Yeah.
- I didn't have a girlfriend.
I just loved my job.
I don't know.
I applied to 500 internships for my first job.
And I got rejected from every single one of them
except for Twilio and then eventually Amazon.
And they took a shot on me and like,
I was getting paid money to write code, which was my dream.
I'm very lucky that like this coding thing worked out
'cause I was gonna be doing it regardless.
And yeah, I was able to kind of spend a lot of time
on a team that was growing at a company that was growing.
So, and it informed a lot of this stuff here.
I think these are problems that have been solved
with the SAML protocol with SSO.
I think it's a relationship with WebAuth then.
These different types of authentication schemes
that you can use to authenticate people.
The tooling is all there.
It just needs to be tweaked a little bit to work for agents.
And I think the fact that there are companies
that are already providing authentication as a service
really sets it up well.
The thing that's hard is reinventing the internet for agents.
We don't wanna rebuild the internet.
That's an impossible task.
And I think people often say like,
well, we'll have this second layer of APIs built for agents.
I'm like, we will for the top use cases,
but instead of we can just tweak the internet as is,
which is on the authentication side,
I think we're gonna be the dumb ones going forward.
Unfortunately, I think as gonna be able to do
a lot of the tasks that we do online,
which means that it will be able to go to websites,
click buttons on our behalf and log in on our behalf too.
So with this kind of like web agent future happening,
I think with some small structural changes, like you said,
it feels like it could all slot on really nicely
with the existing internet.
There's one more thing which is that your live view,
iFrame, which lets you take control.
- Yeah.
- Obviously very key for operator now.
But like, is there anything interesting technically there
or what people always want this?
- It was really hard to build, you know?
Like, so okay, headless browsers, you don't see them, right?
They're running in a cloud somewhere.
You can't like, it's a weird name.
I wish we came with a better name for this thing,
but you can't see them, right?
But customers don't trust AI agents, right?
At least the first pass.
So what we do with our live view
is that, you know, when you use browser base,
you can actually embed a live view of the browser
running in the cloud for your customer to see it working.
And that's what the first reason, the build trust.
Like, okay, so I have this script
that's gonna go automated website.
I can embed it into my web application via an iFrame
and my customer can watch that thing go.
And then we added two way communication.
So now not only can you watch the browser
kind of being operated by AI, if you wanna pause
and actually click around type within this iFrame
and it's controlling a browser, that's also possible.
And this is all thanks to some of the lower level protocol,
which is called the Chrome DevTools protocol.
It has a API called Start Screencast.
And you can also send mouse clicks and button clicks
to a remote browser.
And this is all embeddable within iFrame.
So you have a browser within a browser, yo.
- And then you simulate the screen,
the click on the other side.
- Exactly.
And this is really nice often for like, let's say,
a capture that can't be solved.
You saw this with operator.
You know, operator actually uses a different approach.
It leaves V and C. So, you know, you're able to see,
like you're seeing the whole window here.
What we're doing is something a little lower level
with the Chrome DevTools protocol.
It's just PNGs being streamed over the wire.
But the same thing is true, right?
Like, hey, I'm running a window.
Pause, can you do something in this window, human?
Okay, great, resume.
Like sometimes two of A tokens,
like if you get that text message,
you might need a person to type that in.
Web agents need human-the-loop type workflows still.
You still need a person to interact with the browser.
And building a UI to proxy that is kind of hard.
You may as well just show them the whole browser
and say, hey, can you finish this up for me?
And then let the AI proceed on afterwards.
- Is there a future where I stream my current desktop
to browser-based?
- I don't think so.
I think we're very much cloud infrastructure.
Yeah, you know, but I think a lot of the stuff we're doing,
we do wanna like build tools.
Like, you know, we'll talk about the stage and, you know,
web agent framework in a second, but like,
there's a case where a lot of people are going desktop first
for, you know, consumer use.
And I think cloud is doing a lot of this
where I expect to see, you know, MCP is really oriented
around the cloud desktop app for a reason, right?
Like, I think a lot of these tools are gonna run
on your computer because it makes--
- I think it's breaking up.
- People are putting on a server.
- Oh, really?
Okay, well, sweet.
We'll see that.
- I was surprised, though.
- I think that the browser company too, with DIA browser,
it runs on your machine, you know, it's going to be--
- What is it?
- So DIA browser, as far as I understand--
- It used to use Arc in it.
- Yeah, it does.
- I haven't used Arc.
But I'm a big fan of the browser company.
I think they're doing a lot of cool stuff in consumer.
As far as I understand, it's a browser where you have a sidebar,
where you can chat with it
and it can control the local browser on your machine.
So if you imagine, like, what a consumer web agent is,
which it lives alongside your browser,
I think Google Chrome has Project Marina, I think.
I almost call it Project Marinara, for some reason.
I don't know why it's--
- No, I think it's--
- Someone really likes the water world.
- Oh, 'cause I see the classic Kevin Costner.
- Yeah, okay.
Project Marinner is a similar thing to the DIA browser.
In my mind, as far as I understand it,
you have a browser that has an AI interface
that will take over your mouse and keyboard
and control the browser for you.
Great for consumer use cases,
but if you're building applications that rely on a browser
and it's more part of a greater AI app experience,
you probably need something that's more like infrastructure,
not a consumer app.
- Just because I have explored a little bit in this area,
do people want branching?
So I have the state of whatever my browser's in,
and then I want like 100 clones of the state.
Do people do that?
- Or--
- People don't do it currently,
but it's definitely something we're thinking about.
I think the idea of forking a browser
is really cool, technically kind of hard.
We're starting to see this in code execution
where people are like forking some like code execution
like processes or forking some tool calls
or branching tool calls.
Haven't seen it at the browser level yet,
but it makes sense.
Like if an AI agent is like using a website
and it's not sure what path it wants to take
to crawl this website to find the information
that's looking for, it would make sense
for it to explore both paths in parallel,
and that'd be a very like--
- A road not taken.
- Yeah, and hopefully find the right answer
and then say, okay, this was actually the right one
and memorize that and go there in the future
on the roadmap for sure.
Don't open that roadmap please, you know?
- How do you actually do that?
How do you fork?
I feel like the browser is so stateful for some of the things.
- Serialize the state, restore state, I don't know.
- Well, it's one of the reasons why we haven't done it yet.
It's hard, you know?
Like to truly fork, it's actually quite difficult.
The naive way is to open the same page in a new tab
and then like hope that it's at the same thing.
But if you have a form halfway filled,
you may have to like take the whole, you know,
container, pause it, all the memory, duplicate it,
restart it from there, it could be very slow.
So we haven't found a thing, like the easy thing
to fork is just like copy the page object, you know?
But I think there needs to be something
a little bit more robust there.
- Yeah, so Morflabs has this infinite branch thing.
- Morflabs, yeah, exactly.
- They wrote a custom fork of Linux or something
that let them save the system state, include it.
- Morflabs hit me up, I'll be a customer.
(laughing)
- I think that's the only way to do it, like unless Chrome
has some special API for you.
- Yeah, there's probably something
we'll reverse engineer one day, I don't know.
- Let's talk about stagehand, the AI web browsing framework.
You have three core components,
observe, extract and act, pretty clean landing page.
What was the idea behind making a framework?
- Yeah, so there's three frameworks
that are very popular already exist, right?
Puppeteer, playwright, Selenium.
Those are for building hard coded scripts
to control websites.
And as soon as I started to play with LLMs plus browsing,
I caught myself code-genning, playwright code,
to control website.
I would take the DOM, I'd pass it to an LLM.
I'd say, can you generate the playwright code
to click the appropriate button here?
And it would do that.
And I was like, this really should be part
of the frameworks themselves.
And I became really obsessed with SDKs
that take natural language as part of the API input.
And that's what stagehand is.
Stagehand exposes three APIs,
and it's a super set of playwright.
So if you go to a page, you may want to take an action,
click on the button, fill in the form, et cetera.
That's what the act command is for.
You may want to extract some data.
This one takes a natural language, like extract
the winner of the Super Bowl from this page.
You can give it a Zod schema,
so it returns a structured output.
And then maybe you're building an agent loop
and you want to kind of see what actions are possible
on this page before taking one, you can do observe.
So you can observe the actions on the page
and it will generate a list of actions.
You can guide it, give me actions on this page
related to buying an item.
And you can buy it now, add to cart, few shipping options,
and pass that to an LLM, an agent loop,
to say what's the appropriate action
given this high level goal?
So stagehand isn't a web agent.
It's a framework for building web agents.
And we think that agent loops are actually
pretty close to the application layer
because every application probably has different goals,
different ways it wants to take steps.
I don't think I've seen a generic,
and maybe you guys are the experts here.
I haven't seen like a really good AI agent framework here.
Everyone has their own special sauce, right?
I see a lot of developers building their own agent loops
and they're using tools.
And I view stagehand as the browser tool.
So we expose act, extract, observe.
Your agent can call these tools.
And from that, you don't have to worry
about generating playwright code
performantly, you don't have to worry about running it.
You can kind of just integrate these three tool calls
into your agent loop and reliably automate the web.
A special shout out to Anirud, who I met at your dinner,
who I think listens to the pod.
So yeah, hey, Anirud.
- Anirud, he's a stagehand guy, you know.
- I mean, the interesting thing about each of these APIs
is they're kind of each startup.
Like specifically, extract, you know,
fire crawls, extract, there's like expand AI.
There's a whole bunch of like extract companies.
They just focus on extract.
I'm curious, like, I feel like you guys
are gonna collide at some point.
Like right now, it's friendly.
Everyone's in a blue ocean.
At some point, it's gonna be valuable enough
that there's some turf battle here.
I don't think you have a dog in a fight.
I think you can mock, extract, to use an external service
if they're better at it than you.
But it's just an observation that like in the same way
that I see each option, each checkbox in the site,
the custom GBT is becoming a startup
or each box in the karpati chart being a startup.
Like this is also becoming a thing.
- Yeah, I mean, like, so the way stagehand works
is that it's MIT license, completely open source.
You bring your own API key to your LLM of choice.
You could choose your LLM.
We don't make any money off of the extract or really,
we only really make money if you choose to run it
with our browser.
You don't have to.
You could actually use your own browser,
a local browser, you know,
stagehand is completely open source for that reason.
And yeah, like, I think if you're building
really complex web scraping workflows,
I don't know if stagehand is the tool for you.
I think it's really more if you're building an AI agent
that needs a few general tools
or if it's doing a lot of like web automation intensive work.
But if you're building a scraping company,
stagehand is not your thing.
You probably want something
that's going to like get HTML content,
you know, convert that to Markdown, query it.
That's not what stagehand does.
Stagehands more about reliability.
I think we focus a lot on reliability
and less so on cost optimization and speed at this point.
- I actually hear like stagehands.
So the way the stagehand works like,
it's like, you know, page.act click on the quick start, right?
It's kind of the integration test
for the code that you would have to write anyway.
Like the property code that you have to write anyway.
And when the page structure changes,
'cause it always does, then this is still the test.
This is still the test that I would have to write.
- Yeah.
- So it's kind of like a testing framework
that doesn't need implementation detail.
- Well, yeah, I mean, public tier player
and sledding world design is testing frameworks, right?
And now people are like hacking them together
to automate the web.
I would say in like, maybe this is like me being too specific,
but like when I write tests,
if the page structure changes without me knowing,
I want that test to fail.
So I don't know if like AI, like regenerating that,
like people are using stagehand for testing,
but it's more for like usability testing,
not like testing of like,
does the front end like, has it changed or not?
So, but generally where we've seen people like really,
like take off is like, if they're using, you know,
something, if they want to build a feature
in the application that's kind of like operator
or deep research, they're using stagehand
to kind of power that tool calling in their own agent loop.
- Okay, cool.
So let's go into operator.
The first big agent launch of the year from OpenAI,
seems like they have a whole bunch scheduled.
You were on break and your phone blew up.
What's your just general view of computer use agents
is what they're calling it.
The overall category, before we go into open operator,
just the overall promise of operator,
I will observe that I tried it once.
It was okay and I never tried it again.
- That tracks with my experience too.
Like I'm a huge fan of the OpenAI team.
Like I think that I do not view operator
as the company killer for browser base at all.
I think it actually shows people what's possible.
I think like computer use models make a lot of sense.
And I'm actually most excited about computer use models
is like their ability to like really take screenshots
and reasoning and output steps.
I think that using mouse click or mouse coordinates,
I've seen that prove to be less reliable than I would like.
And I just wonder if that's the right form factor.
What we've done with our framework
is anchor it to the DOM itself, anchor it to the actual items.
So like if it's clicking on something,
it's clicking on that thing, you know,
like it's more accurate.
- No matter where it is.
- Yeah, exactly.
'Cause it really ties in nicely.
And it can handle like the whole viewport in one go,
whereas like operator can only handle what it sees.
- Can you hover?
- It's hovering I think that you can do.
- I don't know if we expose it as a tool directly,
but I'm sure there's like an API for hovering,
like move mouse to this position.
- Yeah, yeah, yeah.
- I think you can trigger hover like via like
the JavaScript on the DOM itself.
But no, I think like when we saw computer use,
everyone's eyes lit up 'cause they realized like,
wow, like AI is gonna actually automate work for people.
And I think seeing that kind of happen
from both of the labs and I'm sure we're gonna see
more labs launch computer use models,
I'm excited to see all the stuff that people build with it.
I think that I'd love to see computer use power,
like controlling a browser on browser base.
And I think like open operator,
which was like our open source version
of opening eyes operator was our first take
on like how can we integrate these models
into browser base and we handle the infrastructure
and let the labs do the models.
I don't have a sense that operator will be released
as an API.
I don't know, maybe it will.
I'm curious to see how well that works
'cause I think it's gonna be really hard for a company
like OpenAI to do things like support capture solving
or like have proxies.
Like I think it's hard for them structurally.
Imagine this New York Times headline,
OpenAI capture solving, like that would be
a pretty bad headline.
This New York Times headline, browser base solves captures.
Like for no one knows.
(laughing)
And okay, like and like our investors are bored,
like we're all okay with this, you know?
We are building this company knowing
that the capture solving is short lived
until we figure out how to authenticate good bots.
I think it's really hard for a company like OpenAI
who has this brand that's so, so good
to balance with like the icky parts of web automation,
which it can be kind of complex to solve.
- I'm sure OpenAI knows who to call
when whatever they do.
- Yeah, right.
I'm sure they'll have a great partnership.
- And is open operator just like a marketing thing for you?
Like how do you think about resource allocation?
So you can spin this up very quickly
and now they're sort of like open the precursors open,
open all these things that you're building.
(laughing)
- You're the original open operator, you know?
- Is it just, hey, like this is a demo
but I will help you build out an actual product for yourself.
Like are you interested in going more of a product route?
That's kind of the open AI way, right?
They started as a model provider and then.
- Yeah, we're not interested in going the product route yet.
I view open operator as a reference project, you know?
Let's show people how to build these things.
Using the infrastructure models that are out there.
And that's what it is.
It's like open operator is very simple.
It's an agent loop.
It says like take a high level goal, break it down into steps,
use tool calling to accomplish those steps.
It takes screenshots and feed those screenshots
into an LLM with the step to generate the right action.
It uses stage hand under the hood
to actually execute this action.
It doesn't use a computer use model.
And it like has a nice interface using the live view
that we talked about the iframe
to embed that into an application.
So I felt like people on launch day wanted to figure out
how to build their own version of this.
And we turned that around really quickly to show them.
And I hope we do that with other things like deep research.
We don't have a deep research launch yet.
I think David from Aomni Action is an amazing open deep
research that he launched as like 10k GitHub stars now.
So he's crushing that.
But I think if people want to build these features
natively into their application,
they need good reference projects.
And I think open operator is a good example of that.
- I don't know.
Actually, I mentioned pretty bullish on API driven operator
because that's the only way that you can sort of like
once it's reliable enough, obviously and now we're nowhere
in there, but like give it five years.
It'll happen, you know, and then you can sort of spin this up
and browsers are working in the background
and you don't necessarily have to know.
And it just is booking restaurants for you, whatever.
I can definitely see that future happening.
I had this on the landing page here.
This might be a slightly out of order,
but you know, you have like sort of three use cases
for browser base.
So open operator or just the operator sort of use case
is kind of like the workflow automation use case
and it completes with UI path in the sort of RPA category.
Would you agree with that?
- Yeah, I would agree with that.
- And then there's agents we talked about already
in web scraping, which I imagine would be your,
the bulk of your workload right now, right?
- No, not at all.
I'd say actually like the majority is browser automation.
- Okay.
- We're kind of expensive for web scraping.
Like I think that if you're building a web scraping product,
if you need to do occasional web scraping
or you have to do web scraping that works every single time,
you wanna use browser base.
But if you're building web scraping workflows,
what you should do is have a waterfall.
You should have the first request is a curl to the website.
See if you can get it without even using a browser.
And then the second request,
maybe like a scraping specific API.
There's like a thousand scraping APIs out there
that you can use to try and get data.
Like scraping B is a great example, right?
Yeah.
And then like if those two don't work,
bring out the heavy hitter.
Like browser base will 100% work, right?
It will load the page in a real browser, hydrate it.
- I see.
'Cause a lot of people don't render the JS.
- Yeah.
- Okay, cool.
I just wanted to get a rough sense.
- Yeah, exactly.
So I mean, the three big use case, right?
Like, you know, automation, web data collection.
And then, you know, if you're building anything agentic,
that needs like a browser tool.
You want to use browser base.
- Is there any use case that like you are super surprised by
that people might not even think about?
- Or is it, yeah, anything that you can share?
- The long tail is crazy.
One of the case studies on our website
that I think is the most interesting
is this company called Benny.
So the way that it works is,
if you're on food stamps in the United States,
you can actually get rebates if you buy certain things.
Maybe buy some vegetables.
You submit your receipt to the government.
They'll give you a little rebate back.
Say, "Hey, thanks for buying vegetables."
It's good for you.
That process of submitting that receipt is very painful.
And the way Benny works is you use their app
to take a photo of your receipt,
and then Benny will go submit that receipt for you
and then deposit the money into your account.
That's actually using no AI at all.
That's all like hard-coded scripts.
They maintain the scripts.
They've been doing a great job
and they build some amazing consumer app.
But it's an example of all these tedious workflows
that people have to do to go about their day-to-day lives.
And I had never known about food stamp rebates
or the complex forms you have to do to fill them,
but the world is powered by millions and millions
of tedious forms, visas in your lighthouse as a customer.
They do the old one visa.
Millions and millions of forms are taking away humans' time.
And I hope that browser base can help power software
that automates away the web forms
that we don't need anymore.
Yeah, I mean, I'm very supportive of that in forms.
I do think government itself should embrace AI more
to do more sort of human-friendly form-filling.
But I'm not optimistic I'm not holding my breath.
Yeah, we'll see.
Okay, I think I'm about to zoom out.
I have a little brief thing on computer use
and then we can talk about founder stuff,
which is, I tend to think of developer tooling markets
in impossible triangles where everyone starts in a niche
and then they start to branch out.
So I already hinted a little bit of this, right?
We mentioned more if we mentioned E2B,
mentioned Firecall, and then there's browser base.
So there's like all this stuff of like
have serverless virtual computer
that you give to an agent and let them do stuff with it.
And either, and there's various ways
of connecting it to the internet.
You can just connect to a search API, like SERP API,
whatever other, exa is another one.
That's what you're searching.
You can also have a JSON markdown extractor,
which is FireCrawl.
Or you can have a virtual browser, like browser base,
or you can have a virtual machine like Morph.
And then there's also maybe like a virtual code environment,
like code interpreter.
So like, there's just like a bunch of different ways
to tackle the problem of give a computer to an agent.
And I'm just kind of wondering if you see like,
everyone's just like happily coexisting in there
in the respective niches.
And as a developer, I just go and pick
like a shopping basket of one of each.
Or do you think that eventually people will collide?
I think that currently it's not a zero sum market.
Like I think we're talking about all of knowledge work
that people do that can be automated online,
all of these like trillions of hours that happen online
where people are working.
And I think that there's so much software to be built
that like, I tend not to think about
how these companies will collide.
I just try to solve the problem as best as I can
and make this specific piece of infrastructure,
which I think is an important primitive,
the best I possibly can.
And yeah, I think there's players that are actually
gonna launch like over the top, you know, platforms,
like agent platforms that have all these tools built in,
right?
Like who's building the rippling for agent tools
that has a search tool, the browser tool,
the operator system tool, right?
- There's some.
- There's some, right?
And I think in the end, what I have seen as my time
as developer, and I look at all the favorite tools that I have,
is that like, for tools and primitives
with sufficient levels of complexity,
you need to have a solution that's really bespoke
to that primitive, you know?
And I am sufficiently convinced that the browser
is complex enough to deserve a primitive.
Obviously I have to, I'm the founder of browser-based, right?
I'm talking my book, but like, I think maybe I can give you
one spicy take against like maybe just hole in OS running.
I think that when I look at computer use
when I first came out, I saw that the majority of use cases
for computer use were controlling a browser.
And do we really need to run an entire operating system
just to control a browser?
I don't think that's necessary.
You know, browser-based can run browsers for way cheaper
than you can if you're running a full fledged OS
with a GUI, you know, operating system.
And I think that's just an advantage of the browser.
It is like, browsers like are little OSs,
and you can run them very efficiently
if you orchestrate it well.
And I think that allows us to offer 90% of the,
you know, functionality and the platform needed
at 10% of the cost of running a full OS.
Yeah, I definitely see the logic in that.
There's a Mark Andreessen quote.
I don't know if you know this one,
where he basically observed that the browser is turning
the operating system into a poorly debug set
of device drivers, because most of the apps
are moved from the OS to the browser.
So you can just run those.
It is place for OSs too.
Like I think that there are some applications
that only run on Windows operating systems
and Eric from Pig.dev and this upcoming YC batch,
or last but YC batch, like he's building,
all run tons of Windows operating systems for you
to control with your agent.
And like there's some legacy EHR systems
that only run on Internet Explorer and Windows.
And browser based doesn't explore.
- Scopics.
- Yeah, I think that's it.
I think like there are use cases for specific operating systems
for specific legacy software.
And like I'm excited to see what he does with that.
- I just wanted to give a shout out to the Pig.dev website,
the pigs jump with you click on them.
- That's great.
Eric, he's the former co-founder of banana.dev too.
- Oh, there Eric.
- Yeah, that Eric.
Okay, well, you abandoned bananas for pigs.
- Oh, I hope he doesn't start going around with pigs now.
- I like you.
- Like you're going around with bananas.
- Ew, toy pig.
Yeah, love that.
- What else are we missing?
I think we've covered a lot of like the browser base
product history, but.
- What do you wish people asked you?
- Yeah.
- I wish people will ask me more about like,
what will the future of software look like?
'Cause I think that's really where I've spent a lot of time
about why to browser base.
Like for me, starting a company is like a means of last resort.
Like you shouldn't start a company unless you absolutely have to.
And I remain convinced that the future of software is
software that you're going to click a button
and it's going to do stuff on your behalf.
Right now software, you click a button and it may be like,
calls it back on API and like compute some numbers.
It like, modify some text, whatever.
But the future of software is software using software.
So I may log into my accounting website for my business,
click a button and it's going to go load up my emails,
search my emails, find the thing, upload the receipt
and then comment it for me, right?
And it may use it using APIs, maybe a browser.
I don't know, I think it's a little bit of both.
But that's completely different from how we built software so far.
And that future of software has different
infrastructure requirements.
It's going to require different UIs.
It's going to require different pieces of infrastructure.
I think the browser infrastructure is one piece
that fits into that, along with all the other categories
you mentioned.
So I think that it's going to require developers to think
differently about how they built software for application level
so far.
And I'm excited to kind of explore more what that means.
And I think we've seen from the customers
that use browser space so far, some really innovative ways
to take software and really reimagine it for AI
and build things that have chat interfaces,
build things that have human loop flows,
build things that are more asynchronous because AI is slower.
And those are patterns that are still emerging.
And I don't think we have all the best practices yet.
I don't have much to feedback on that.
Like that's true.
Paul's right.
Paul's right.
You're the year first.
You're the year first.
Yeah, amazing.
I'm framing that.
It is not specific enough to be wrong.
That means Paul's right to me still.
I don't know if I'm hearing that wrong.
I always try to prompt people for falsifiable predictions
because you can predict that things will be better generically.
But how?
And those are the things where you put the little skin
in the game where--
Yeah, I mean, I can predict that browser
space will be a billion dollar company one day.
So let's check back in five years.
And if I'm a PM at Coinbase, then something went wrong.
Oh, boy.
Yeah, yeah.
Yeah, we picked out a couple of your tweets about a founder.
I think you're a pretty building public kind of guy.
Yeah, I try to be.
I think the main thing that I want to highlight as well
is you emphasize this at the start of your intro,
which is you're a solo founder.
I think that there's a movement towards more solo founders
in the valley more generally.
But people who are hearing this for the first time
have no idea.
They're like, what do you mean?
Why see forces me to get a co-founder?
Like, what is this?
So I've heard you talk about this before,
but maybe you want to recap your spiel for folks
that haven't heard about it.
Yeah, yeah, I mean, I've had co-founders in my past company.
I love my co-founders, they're my wedding.
I think if you want to move extremely fast as a company,
one of the hard parts about having co-founders
is that you have to do the co-founder alignment
and then the company alignment.
And then there's people on the team
that probably tell things to one co-founder
'cause they have a favorite.
And then that co-founders represent their interests.
Matt Brosways is a benevolent dictatorship.
If I want to make a change, I work with the team
and we all decide together, we move quickly.
We don't have an extra layer of buy-in
within the co-founder layer.
And frankly, I think, especially with DevTools companies,
if you're able to talk about your product
and talk with customers and you can build product,
you don't need to have a business guy or a business guy.
I'm a developer, first and foremost.
I was raised by two salespeople,
so I guess that's why I can talk to customers or something.
But at my core sales, I love,
they did semiconductor and pharmaceutical sales.
My mom and dad. - Very different.
- Yeah, very different.
- But also very enterprise, good.
- Yeah, yeah, yeah, I mean, it rubbed off, I mean,
somewhere, I was just trying to play wow as a kid
and they made me play sports.
So I don't know how it worked out the way it did,
but it does all come back to like,
as a solo founder, you need to be willing to like go out there
and talk about your product, go talk to customers,
go convince people to work for you.
But then also have core principles of like,
how you want to build this company
and like what product you want to build.
And thankfully, if you can do all of that,
you can be a solo founder.
You just have to hire fast and put the right team around you.
And I'm lucky to have the team that we do
that's surrounding me and kind of lifting the whole company up.
- So there's kind of like the decision making
and then there's like the culture of a company.
Obviously as a solo founder,
you have huge influence on everybody.
Apple is maybe the usual example of like, you know,
you have the jobs in Wozniak.
- No, no, like you kind of have two co-founders
that are like each polarizing.
- It was the third co-founder, by the way.
- Who's the third co-founder?
- Like, I don't know, he sold his chairs very well.
Nobody talks about him, but he's like,
he always has a bit of a regret.
- But anyway, yeah, how have you thought about building
the culture, you know, obviously startups are like super
intense, but you're also gonna just run yourself
to the ground all the time.
Any insight doing it solo?
- Yeah, I mean, like, I talked about like how it's easier
for me to make decisions being a solo founder.
The real cheat code is like having a great team
that you give a lot of agency and ownership to.
A lot of people make the little tiny decisions
that go into everything that makes brass base great.
Like the website, for example.
I had some like some involvement with that,
but like a lot of that was the team, right?
And then the product, I think the team really has ownership
of a lot of these data decisions that add up
to make a cohesive product experience.
Culturally, like we're fully in person.
Maybe that's one crazy take that we do.
But we're also like not too in person.
Like our first meeting is at 10 a.m.
People leave around five or six.
We work Monday to Friday in person.
And it was like, that's the expectation, right?
I think people have gone too far within person
where they're like seven days a week in the office,
nine a.m. to nine p.m.
That's too much.
- Just an anecdote, I just visited an office.
I'll keep them anonymous for now.
But to my face, we are 996.
- Yeah.
- For those who don't know, 996 is 9 a.m. to 9 p.m.
Six days a week.
- I think we've taken it a little too far.
And for some teams, I know another anonymous company
that does something like 996 and they're like crushing it
right now, right?
So like, and like it does get results.
But like I think for our culture,
we gather in person, we put pants on every day
and go to the office so that we can all work together.
More shorts, I guess, right?
And then like, we all know we're gonna work outside
out of the office, we're gonna work at home sometimes.
We might come in on a weekend.
The weekends are for fun work.
And that's really where we get to let people work on stuff
that's not on the road map.
And that empowers them to build something
and bring it back to the team on Monday
and say, look what I built, this is cool.
Culturally, we're a lot of like former YCCTOs
and like X founders or future founders.
And I've just found that those people tend to be
just really great early hires for a company.
They get it.
And I think for them, especially kind of the X, Y, C people
who maybe didn't find PMF coming in
and being at a company with PMF,
it's such a refreshing thing for them
because they can just come in and execute.
And there's just so many clear things we have to go build.
And if you're a talented engineer,
being able to go build and make an impact every single day
is like super fulfilling.
- My question on the other hand is,
you also talk a lot about recruiting,
especially in the podcast that you talk about,
how come there's no browser based recruiting agent?
- That's a good question.
I think it's 'cause I don't do that much outbound.
I do message people, but a lot of it's now
through referral, it's very targeted.
Like if I see somebody working on something really cool,
I just message them.
So I don't want like something trawling the web
and like messaging every Kubernetes firecracker expert.
I try and like look for them in my passive web browsing.
And when I find somebody,
I just want to like take the time personally
to like say, hey, I love what you're doing.
I think it's really cool and let's have a conversation.
- Yeah, off of Hacker News and other stuff.
- Love to hire off of Hacker News.
- Yeah, let you plug at the end.
- My attempt at this failed, which is I really hate
LinkedIn sales navigator.
I think that it is just grifting on top of people
doing data entry for LinkedIn.
And I hope that browser base will someday help
to kill LinkedIn sales navigator.
That's great.
- I don't know if we will directly,
but one of our customers definitely is trying to do that.
So I think there's a couple that are on it.
These AISDR companies are crushing it, so.
- Yup, the non-ISX company was an AISDR company.
- There we go.
- Yeah, very classic.
- This was great, anything?
- Yeah, the women's, you got the wrong clubs too.
What are the things that you mix in,
like both in the company culture
and like the community culture?
I know you bring people together often.
- Yeah, I think like we try and build in public
and like you can see a lot of the browse base people
on Twitter.
Every Monday we have a running club,
people go running together.
We don't run very fast, but it's like a good way
to spend time together.
I just look back fondly on my time being in person
at my first company.
And we have people like with a mix of people
like are just early in career.
People have been in the workforce for 20, 30 years.
So it's not just like a young people company,
like it's a huge mix.
But when you make people make a polarizing decision
of like I will come to an office five days a week,
people then end up making more decisions
that are aligned with the culture.
So it's almost like if you can make your culture binary
or you're in or out, it becomes easier to assimilate
and like keep a cohesive culture.
And I think it starts with being an office for us,
but for other people it can be like moving
or like using Discord versus Slack
or like other like binary decisions
that people may have to make.
One thing I like asking founders is,
you know, you're famously not an AI company
or you know, you serve AI companies,
but you're not yourself a LM sort of consuming company.
But if you were though, what company would you start?
What's like obviously a good idea?
- Yeah, I had this tweet like forever ago,
which is like there's so much money to be made
in taking like proprietary research
and then turning that into like an automation,
which is obviously like a very like browser based inspired one.
And like listening to all of the city halls
or town hall meetings in like little towns
and then knowing when they're gonna like
approve a new Walmart or something
and then like buying up real estate around the Walmart
because that will go up when they install this thing.
So it's like really interesting to think
about like how can you find new channels for data
that will allow you to make like high alpha decisions
and benefit you financially.
So I think it's like some interesting stuff there,
like just a bunch of conversations that happen
in real life that are recorded, that are online,
that you can go find using a web browser, of course.
And then like making some interesting
like decisions off of that.
So yeah, I don't know, like I like browser stuff
like it's on brand, right?
Like I have to, I'm consistent at least.
- Do not look at it on your phone to our native app.
I'll link like it to the browser.
- My favorite part of one of his videos,
they had these guys holding this B behind them
while they were doing the demo.
So it was like a really Easter egg type of thing.
- Yeah, the stage hand, right?
- Yeah, the stage hand video, it's not,
they're not holding it.
They're actually wearing these B boxes on their heads.
- Oh.
- And we shot it like five times
and poor Sean and Samil are like bobbing their heads
back and forth with these B boxes on.
'Cause we can't afford special sex names,
we're really serious.
- No, no, no.
- Good detail, good effort detail there.
Yeah, thank you so much.
Congrats on all your success.
- Thanks Paul.
- Thanks for having me guys.
It's been a really good time.
- Yeah, I'm sure we'll have you back again.
- Yeah, I'd love to come back.
(upbeat music)
(upbeat music)
(upbeat music)
(upbeat music)

